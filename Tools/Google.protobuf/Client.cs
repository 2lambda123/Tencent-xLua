// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nkclient {

  /// <summary>Holder for reflection information generated from client.proto</summary>
  public static partial class ClientReflection {

    #region Descriptor
    /// <summary>File descriptor for client.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxjbGllbnQucHJvdG8SCG5rY2xpZW50In8KDExvZ2luSGFsbFJlcRILCgN1",
            "aWQYASABKAUSDAoEdXVpZBgCIAEoCRIOCgZnYW1laWQYAyABKAUSCwoDZGlk",
            "GAQgASgFEhEKCWNsaWVudFZlchgFIAEoBRIRCgl1c2VyTGV2ZWwYBiABKAUS",
            "EQoJdXNlck1vbmV5GAcgASgDIikKDUxvZ2luSGFsbFJlc3ASCwoDcmV0GAEg",
            "ASgFEgsKA3RpZBgCIAEoBSJVCg1BbGxvY1RhYmxlUmVxEhEKCXJvb21MZXZl",
            "bBgBIAEoBRIRCgl1c2VyTGV2ZWwYAiABKAUSEQoJdXNlck1vbmV5GAMgASgD",
            "EgsKA3RpZBgEIAEoBSIqCg5BbGxvY1RhYmxlUmVzcBILCgNyZXQYASABKAUS",
            "CwoDdGlkGAIgASgFIh0KC0tpY2tPdXRVc2VyEg4KBnJlYXNvbhgBIAEoBSId",
            "Cg5UcmFjZUZyaWVuZFJlcRILCgN1aWQYASABKAUiTgoPVHJhY2VGcmllbmRS",
            "ZXNwEgsKA3VpZBgBIAEoBRIOCgZzdGF0dXMYAiABKAUSCwoDdGlkGAMgASgF",
            "EhEKCXJvb21MZXZlbBgEIAEoBSI4CgxCcm9hZGNhc3RNc2cSCwoDdWlkGAEg",
            "ASgFEg0KBW10eXBlGAIgASgFEgwKBGluZm8YAyABKAkiKgoKTGV2ZWxDb3Vu",
            "dBINCgVsZXZlbBgBIAEoBRINCgVjb3VudBgCIAEoBSI7ChBHZXRVc2VyQ291",
            "bnRSZXNwEicKCWxldmVsTGlzdBgBIAMoCzIULm5rY2xpZW50LkxldmVsQ291",
            "bnQiewoMTG9naW5HYW1lUmVxEgsKA3VpZBgBIAEoBRILCgN0aWQYAiABKAUS",
            "CwoDZGlkGAMgASgFEhEKCWNsaWVudFZlchgEIAEoBRINCgVtdGtleRgFIAEo",
            "CRIQCgh1c2VybmFtZRgGIAEoCRIQCghiYXNlSW5mbxgHIAEoCSL0AwoKUGxh",
            "eWVySW5mbxILCgN1aWQYASABKAUSDgoGc2VhdElkGAIgASgFEhIKCnVzZXJT",
            "dGF0dXMYAyABKAUSDgoGb25saW5lGAQgASgFEhAKCHVzZXJJbmZvGAUgASgJ",
            "EhAKCGN1ckNhcnJ5GAYgASgDEg8KB2N1ckFudGUYByABKAMSEAoId2ludGlt",
            "ZXMYCCABKAUSEQoJbG9zZXRpbWVzGAkgASgFEhMKC3NwZWNpYWxDYXJkGAog",
            "ASgFEhEKCXVzZXJNb25leRgLIAEoAxIOCgZhZGRFeHAYDCABKAUSEAoIYWRk",
            "TW9uZXkYDSABKAUSHQoFY2FyZHMYDiADKAsyDi5ua2NsaWVudC5DYXJkEg4K",
            "BmlzU2hvdxgPIAEoBRIhCgliZXN0Q2FyZHMYECADKAsyDi5ua2NsaWVudC5D",
            "YXJkEhAKCG11bHRpcGxlGBEgASgFEg8KB3Jvb21GZWUYEiABKAUSEAoIY2Fy",
            "ZHNDbnQYEyABKAUSDQoFaW5kZXgYFCABKAUSIgoHYmV0SW5mbxgVIAMoCzIR",
            "Lm5rY2xpZW50LkJldEluZm8SEwoLc2V0dGxlU3RhdGUYFiABKAUSIAoIb3V0",
            "Q2FyZHMYFyADKAsyDi5ua2NsaWVudC5DYXJkEhAKCHZpcExldmVsGBggASgF",
            "IskDCglUYWJsZUluZm8SCwoDdGlkGAIgASgFEg0KBWxldmVsGAMgASgFEhMK",
            "C3RhYmxlU3RhdHVzGAQgASgFEhIKCmJhbmtTZWF0aWQYBSABKAUSEwoLZGVm",
            "YXVsdEFudGUYBiABKAMSEQoJdG90YWxBbnRlGAcgASgDEhEKCWN1clNlYXRp",
            "ZBgIIAEoBRIQCghsZWZ0VGltZRgJIAEoBRIRCglxdWlja0NhbGwYCiABKAMS",
            "DwoHbWluQ2FsbBgLIAEoAxIPCgdtYXhDYWxsGAwgASgDEhEKCXJvdW5kVGlt",
            "ZRgNIAEoBRISCgptYXhTZWF0Q250GA4gASgFEhAKCG1pbkNhcnJ5GA8gASgD",
            "EhAKCG1heENhcnJ5GBAgASgDEhQKDGRlZmF1bHRDYXJyeRgRIAEoAxIPCgdy",
            "b29tVGFiGBIgASgFEiEKCWJvYXJkQ2FyZBgTIAMoCzIOLm5rY2xpZW50LkNh",
            "cmQSEQoJc3lzQmFua2VyGBQgASgFEhYKDmJvYXJkQ2FyZFRpbWVzGBUgASgF",
            "EhIKCmJhbmtVc2VySWQYFiABKAUSIQoJbGVmdENhcmRzGBcgAygLMg4ubmtj",
            "bGllbnQuQ2FyZCJqCg1TZW5kVGFibGVJbmZvEgsKA3JldBgBIAEoBRIiCgV0",
            "YWJsZRgCIAEoCzITLm5rY2xpZW50LlRhYmxlSW5mbxIoCgpwbGF5ZXJMaXN0",
            "GAMgAygLMhQubmtjbGllbnQuUGxheWVySW5mbyJBCg5Vc2VyU2l0RG93blJl",
            "cRIOCgZzZWF0SWQYASABKAUSDAoEYW50ZRgCIAEoAxIRCglhdXRvQnV5aW4Y",
            "AyABKAUiHgoPVXNlclNpdERvd25SZXNwEgsKA3JldBgBIAEoBSJpChNTcnZC",
            "cm9hZGNhc3RTaXREb3duEgsKA3VpZBgBIAEoBRIOCgZzZWF0SWQYAiABKAUS",
            "EAoIY3VyQ2FycnkYAyABKAMSEQoJdXNlck1vbmV5GAQgASgDEhAKCHVzZXJJ",
            "bmZvGAUgASgJIjsKCFVzZXJBbnRlEg4KBnNlYXRJZBgBIAEoBRIQCghjdXJD",
            "YXJyeRgCIAEoAxINCgVib251cxgDIAEoAyIUCgRDYXJkEgwKBGNhcmQYASAB",
            "KAUizQEKEFNydlNlbmRHYW1lU3RhcnQSEgoKYmFua1NlYXRpZBgBIAEoBRIT",
            "CgtkZWZhdWx0QW50ZRgCIAEoAxIRCgl0b3RhbEFudGUYAyABKAMSJAoIYW50",
            "ZUxpc3QYBCADKAsyEi5ua2NsaWVudC5Vc2VyQW50ZRIdCgVjYXJkcxgFIAMo",
            "CzIOLm5rY2xpZW50LkNhcmQSEwoLc3BlY2lhbENhcmQYBiABKAUSEAoIY2Fy",
            "ZHNDbnQYByABKAUSEQoJcm91bmRUaW1lGAggASgFIjEKD1VzZXJTdGFuZFVw",
            "UmVzcBIRCgl1c2VyTW9uZXkYASABKAMSCwoDcmV0GAIgASgFIjIKE1NydkJy",
            "b2FkY2FzdFN0YW5kVXASCwoDdWlkGAEgASgFEg4KBnNlYXRJZBgCIAEoBSIg",
            "Cg9Vc2VyU2VuZFRpcHNSZXESDQoFbW9uZXkYASABKAMiUwoQVXNlclNlbmRU",
            "aXBzUmVzcBILCgNyZXQYASABKAUSDQoFY291bnQYAiABKAMSEAoIY3VyQ2Fy",
            "cnkYAyABKAMSEQoJdXNlck1vbmV5GAQgASgDIlkKD1VzZXJTZW5kUHJvcFJl",
            "cRINCgVtb25leRgBIAEoAxIMCgR0eXBlGAIgASgFEgoKAmlkGAMgASgFEg4K",
            "BnNlYXRJZBgEIAEoBRINCgVjb3VudBgFIAEoBSKMAQoQVXNlclNlbmRQcm9w",
            "UmVzcBILCgNyZXQYASABKAUSDQoFcHJpY2UYAiABKAMSEAoIY3VyQ2FycnkY",
            "AyABKAMSEQoJdXNlck1vbmV5GAQgASgDEgwKBHR5cGUYBSABKAUSCgoCaWQY",
            "BiABKAUSDgoGc2VhdElkGAcgASgFEg0KBWNvdW50GAggASgFIiEKDUF1dG9C",
            "dXlpblJlc3ASEAoIY3VyQ2FycnkYASABKAMifAoSU3J2U2VuZE5leHRPcGVy",
            "YXRlEg4KBnNlYXRJZBgBIAEoBRIQCghsZWZ0VGltZRgCIAEoBRIPCgdtaW5D",
            "YWxsGAMgASgDEg8KB21heENhbGwYBCABKAMSEQoJcXVpY2tDYWxsGAUgASgD",
            "Eg8KB29wZXJhdGUYBiABKAUiTgoOVXNlck9wZXJhdGVSZXESDwoHb3BlcmF0",
            "ZRgBIAEoBRIMCgRhbnRlGAIgASgDEh0KBWNhcmRzGAMgAygLMg4ubmtjbGll",
            "bnQuQ2FyZCJBCg9Vc2VyT3BlcmF0ZVJlc3ASCwoDcmV0GAEgASgFEg8KB29w",
            "ZXJhdGUYAiABKAUSEAoIY3VyQ2FycnkYAyABKAMiwAEKE1NydkJyb2FkY2Fz",
            "dE9wZXJhdGUSDgoGc2VhdElkGAEgASgFEhIKCnVzZXJTdGF0dXMYAiABKAUS",
            "DwoHY3VyQW50ZRgDIAEoAxIQCghjdXJDYXJyeRgEIAEoAxIRCgl0b3RhbEFu",
            "dGUYBSABKAMSDwoHb3BlcmF0ZRgGIAEoBRIdCgVjYXJkcxgHIAMoCzIOLm5r",
            "Y2xpZW50LkNhcmQSEAoIY2FyZFR5cGUYCCABKAUSDQoFdGltZXMYCSABKAUi",
            "FgoEU2VhdBIOCgZzZWF0SWQYASABKAUifwoVU3J2QnJvYWRjYXN0VGhpcmRD",
            "YXJkEiAKCHNlYXRMaXN0GAEgAygLMg4ubmtjbGllbnQuU2VhdBIdCgVjYXJk",
            "cxgCIAMoCzIOLm5rY2xpZW50LkNhcmQSEwoLc3BlY2lhbENhcmQYAyABKAUS",
            "EAoIY2FyZHNDbnQYBCABKAUiUAoJQm9udXNJbmZvEhEKCW1vbmV5UG9vbBgB",
            "IAEoAxIhCgVhbnRlcxgCIAMoCzISLm5rY2xpZW50LlVzZXJBbnRlEg0KBWlu",
            "ZGV4GAMgASgFIqkBChRTcnZCcm9hZGNhc3RHYW1lT3ZlchIoCgpwbGF5ZXJM",
            "aXN0GAEgAygLMhQubmtjbGllbnQuUGxheWVySW5mbxImCglib251c0xpc3QY",
            "AiADKAsyEy5ua2NsaWVudC5Cb251c0luZm8SHQoFY2FyZHMYAyADKAsyDi5u",
            "a2NsaWVudC5DYXJkEg4KBnJlc3VsdBgEIAEoBRIQCghpc1NwcmluZxgFIAEo",
            "BSIwCg5Vc2VyTG9nb3V0UmVzcBILCgNyZXQYASABKAUSEQoJdXNlck1vbmV5",
            "GAIgASgDIi4KDVVzZXJEcm9wQ2FyZHMSHQoFY2FyZHMYASADKAsyDi5ua2Ns",
            "aWVudC5DYXJkIlgKFVNydkJyb2FkY2FzdERyb3BDYXJkcxIOCgZzZWF0SWQY",
            "ASABKAUSEAoIY2FyZHNDbnQYAiABKAUSHQoFY2FyZHMYAyADKAsyDi5ua2Ns",
            "aWVudC5DYXJkIoMBCglTaG93Q2FyZHMSDgoGc2VhdElkGAEgASgFEh0KBWNh",
            "cmRzGAIgAygLMg4ubmtjbGllbnQuQ2FyZBITCgtzcGVjaWFsQ2FyZBgDIAEo",
            "BRIQCghtdWx0aXBsZRgEIAEoBRINCgVpc1dpbhgFIAEoBRIRCglyb3VuZFRp",
            "bWUYBiABKAUiUwoUU3J2QnJvYWRjYXN0VXNlckNhcmQSJgoJdXNlckNhcmRz",
            "GAEgAygLMhMubmtjbGllbnQuU2hvd0NhcmRzEhMKC3RhYmxlU3RhdHVzGAIg",
            "ASgFIikKFVNydkJyb2FkY2FzdENoZWNrQ2FyZBIQCghzaG93VGltZRgBIAEo",
            "BSJCCg5Vc2VyU2xvdEJldFJlcRINCgVsaW5lcxgBIAEoBRINCgVjaGlwcxgC",
            "IAEoAxISCgppc1VzZVByb3BzGAMgASgFIk8KD1VzZXJTbG90QmV0UmVzcBIL",
            "CgNyZXQYASABKAUSEQoJdXNlck1vbmV5GAIgASgDEg0KBWxpbmVzGAMgASgF",
            "Eg0KBWNoaXBzGAQgASgDIikKClNsb3RXaW5SZXQSDAoEbGluZRgBIAEoBRIN",
            "CgVjb3VudBgCIAEoBSLLAQoWU3J2QnJvYWRjYXN0U2xvdFJlc3VsdBIOCgZz",
            "ZWF0SWQYASABKAUSEAoIYWRkTW9uZXkYAiABKAMSEQoJdXNlck1vbmV5GAMg",
            "ASgDEhIKCnRvdGFsQm9udXMYBCABKAMSHQoFY2FyZHMYBSADKAsyDi5ua2Ns",
            "aWVudC5DYXJkEiIKBHBvdHMYBiADKAsyFC5ua2NsaWVudC5TbG90V2luUmV0",
            "EhAKCGJvbnVzQ250GAcgASgFEhMKC3NwZWNpYWxDYXJkGAggASgFInoKGFNy",
            "dkJyb2FkY2FzdE5pdW5pdVJlc3VsdBISCgp0b3RhbEJvbnVzGAEgASgDEiIK",
            "BWNhcmRzGAIgAygLMhMubmtjbGllbnQuU2hvd0NhcmRzEiYKCHVzZXJMaXN0",
            "GAMgAygLMhQubmtjbGllbnQuUGxheWVySW5mbyJ4ChFTcnZCcm9hZGNhc3RC",
            "ZXRPbhIOCgZzZWF0SWQYASABKAUSDAoEc2xvdBgCIAEoBRIMCgRhbnRlGAMg",
            "ASgDEhAKCGN1ckNhcnJ5GAQgASgDEiUKCGFudGVMaXN0GAUgAygLMhMubmtj",
            "bGllbnQuQm9udXNJbmZvInMKFlNydkJyb2FkY2FzdEJvYXJkQ2FyZHMSDgoG",
            "c2VhdElkGAEgASgFEh0KBWNhcmRzGAIgAygLMg4ubmtjbGllbnQuQ2FyZBIW",
            "Cg5ib2FyZENhcmRUaW1lcxgDIAEoBRISCgp0b3RhbFRpbWVzGAQgASgFIkQK",
            "B0JldEluZm8SDAoEYW50ZRgBIAEoAxINCgVjb3VudBgCIAEoBRINCgVib251",
            "cxgDIAEoAxINCgV0aW1lcxgEIAEoBSItCgxVc2VyQ2FyZExpc3QSHQoFY2Fy",
            "ZHMYASADKAsyDi5ua2NsaWVudC5DYXJkIjoKFVNydkJyb2FkY2FzdFVzZXJS",
            "ZWFkeRIOCgZzZWF0SWQYASABKAUSEQoJdXNlck1vbmV5GAIgASgDIikKCkJh",
            "bmtlckluZm8SDgoGc2VhdElkGAEgASgFEgsKA3VpZBgCIAEoBSJZCghGaXNo",
            "SW5mbxIOCgZmaXNoSWQYASABKAUSEAoIZmlzaFR5cGUYAiABKAUSDgoGcGF0",
            "aElkGAMgASgFEgwKBGxpZmUYBCABKAUSDQoFZGVsYXkYBSABKAUiMgoKQ3Jl",
            "YXRlRmlzaBIkCghmaXNoTGlzdBgBIAMoCzISLm5rY2xpZW50LkZpc2hJbmZv",
            "IqQBCgtTaG90RmlzaE1zZxIOCgZzZWF0SWQYASABKAUSEwoLY2Fubm9uTGV2",
            "ZWwYAiABKAUSJAoIZmlzaExpc3QYAyADKAsyEi5ua2NsaWVudC5GaXNoSW5m",
            "bxIRCgl0YXJnZXRQb3MYBCABKAISJAoIa2lsbExpc3QYBSADKAsyEi5ua2Ns",
            "aWVudC5GaXNoSW5mbxIRCgl1c2VyTW9uZXkYBiABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.LoginHallReq), global::Nkclient.LoginHallReq.Parser, new[]{ "Uid", "Uuid", "Gameid", "Did", "ClientVer", "UserLevel", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.LoginHallResp), global::Nkclient.LoginHallResp.Parser, new[]{ "Ret", "Tid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.AllocTableReq), global::Nkclient.AllocTableReq.Parser, new[]{ "RoomLevel", "UserLevel", "UserMoney", "Tid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.AllocTableResp), global::Nkclient.AllocTableResp.Parser, new[]{ "Ret", "Tid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.KickOutUser), global::Nkclient.KickOutUser.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.TraceFriendReq), global::Nkclient.TraceFriendReq.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.TraceFriendResp), global::Nkclient.TraceFriendResp.Parser, new[]{ "Uid", "Status", "Tid", "RoomLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.BroadcastMsg), global::Nkclient.BroadcastMsg.Parser, new[]{ "Uid", "Mtype", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.LevelCount), global::Nkclient.LevelCount.Parser, new[]{ "Level", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.GetUserCountResp), global::Nkclient.GetUserCountResp.Parser, new[]{ "LevelList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.LoginGameReq), global::Nkclient.LoginGameReq.Parser, new[]{ "Uid", "Tid", "Did", "ClientVer", "Mtkey", "Username", "BaseInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.PlayerInfo), global::Nkclient.PlayerInfo.Parser, new[]{ "Uid", "SeatId", "UserStatus", "Online", "UserInfo", "CurCarry", "CurAnte", "Wintimes", "Losetimes", "SpecialCard", "UserMoney", "AddExp", "AddMoney", "Cards", "IsShow", "BestCards", "Multiple", "RoomFee", "CardsCnt", "Index", "BetInfo", "SettleState", "OutCards", "VipLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.TableInfo), global::Nkclient.TableInfo.Parser, new[]{ "Tid", "Level", "TableStatus", "BankSeatid", "DefaultAnte", "TotalAnte", "CurSeatid", "LeftTime", "QuickCall", "MinCall", "MaxCall", "RoundTime", "MaxSeatCnt", "MinCarry", "MaxCarry", "DefaultCarry", "RoomTab", "BoardCard", "SysBanker", "BoardCardTimes", "BankUserId", "LeftCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SendTableInfo), global::Nkclient.SendTableInfo.Parser, new[]{ "Ret", "Table", "PlayerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSitDownReq), global::Nkclient.UserSitDownReq.Parser, new[]{ "SeatId", "Ante", "AutoBuyin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSitDownResp), global::Nkclient.UserSitDownResp.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastSitDown), global::Nkclient.SrvBroadcastSitDown.Parser, new[]{ "Uid", "SeatId", "CurCarry", "UserMoney", "UserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserAnte), global::Nkclient.UserAnte.Parser, new[]{ "SeatId", "CurCarry", "Bonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.Card), global::Nkclient.Card.Parser, new[]{ "Card_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvSendGameStart), global::Nkclient.SrvSendGameStart.Parser, new[]{ "BankSeatid", "DefaultAnte", "TotalAnte", "AnteList", "Cards", "SpecialCard", "CardsCnt", "RoundTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserStandUpResp), global::Nkclient.UserStandUpResp.Parser, new[]{ "UserMoney", "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastStandUp), global::Nkclient.SrvBroadcastStandUp.Parser, new[]{ "Uid", "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSendTipsReq), global::Nkclient.UserSendTipsReq.Parser, new[]{ "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSendTipsResp), global::Nkclient.UserSendTipsResp.Parser, new[]{ "Ret", "Count", "CurCarry", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSendPropReq), global::Nkclient.UserSendPropReq.Parser, new[]{ "Money", "Type", "Id", "SeatId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSendPropResp), global::Nkclient.UserSendPropResp.Parser, new[]{ "Ret", "Price", "CurCarry", "UserMoney", "Type", "Id", "SeatId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.AutoBuyinResp), global::Nkclient.AutoBuyinResp.Parser, new[]{ "CurCarry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvSendNextOperate), global::Nkclient.SrvSendNextOperate.Parser, new[]{ "SeatId", "LeftTime", "MinCall", "MaxCall", "QuickCall", "Operate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserOperateReq), global::Nkclient.UserOperateReq.Parser, new[]{ "Operate", "Ante", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserOperateResp), global::Nkclient.UserOperateResp.Parser, new[]{ "Ret", "Operate", "CurCarry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastOperate), global::Nkclient.SrvBroadcastOperate.Parser, new[]{ "SeatId", "UserStatus", "CurAnte", "CurCarry", "TotalAnte", "Operate", "Cards", "CardType", "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.Seat), global::Nkclient.Seat.Parser, new[]{ "SeatId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastThirdCard), global::Nkclient.SrvBroadcastThirdCard.Parser, new[]{ "SeatList", "Cards", "SpecialCard", "CardsCnt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.BonusInfo), global::Nkclient.BonusInfo.Parser, new[]{ "MoneyPool", "Antes", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastGameOver), global::Nkclient.SrvBroadcastGameOver.Parser, new[]{ "PlayerList", "BonusList", "Cards", "Result", "IsSpring" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserLogoutResp), global::Nkclient.UserLogoutResp.Parser, new[]{ "Ret", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserDropCards), global::Nkclient.UserDropCards.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastDropCards), global::Nkclient.SrvBroadcastDropCards.Parser, new[]{ "SeatId", "CardsCnt", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.ShowCards), global::Nkclient.ShowCards.Parser, new[]{ "SeatId", "Cards", "SpecialCard", "Multiple", "IsWin", "RoundTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastUserCard), global::Nkclient.SrvBroadcastUserCard.Parser, new[]{ "UserCards", "TableStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastCheckCard), global::Nkclient.SrvBroadcastCheckCard.Parser, new[]{ "ShowTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSlotBetReq), global::Nkclient.UserSlotBetReq.Parser, new[]{ "Lines", "Chips", "IsUseProps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserSlotBetResp), global::Nkclient.UserSlotBetResp.Parser, new[]{ "Ret", "UserMoney", "Lines", "Chips" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SlotWinRet), global::Nkclient.SlotWinRet.Parser, new[]{ "Line", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastSlotResult), global::Nkclient.SrvBroadcastSlotResult.Parser, new[]{ "SeatId", "AddMoney", "UserMoney", "TotalBonus", "Cards", "Pots", "BonusCnt", "SpecialCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastNiuniuResult), global::Nkclient.SrvBroadcastNiuniuResult.Parser, new[]{ "TotalBonus", "Cards", "UserList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastBetOn), global::Nkclient.SrvBroadcastBetOn.Parser, new[]{ "SeatId", "Slot", "Ante", "CurCarry", "AnteList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastBoardCards), global::Nkclient.SrvBroadcastBoardCards.Parser, new[]{ "SeatId", "Cards", "BoardCardTimes", "TotalTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.BetInfo), global::Nkclient.BetInfo.Parser, new[]{ "Ante", "Count", "Bonus", "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.UserCardList), global::Nkclient.UserCardList.Parser, new[]{ "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.SrvBroadcastUserReady), global::Nkclient.SrvBroadcastUserReady.Parser, new[]{ "SeatId", "UserMoney" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.BankerInfo), global::Nkclient.BankerInfo.Parser, new[]{ "SeatId", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.FishInfo), global::Nkclient.FishInfo.Parser, new[]{ "FishId", "FishType", "PathId", "Life", "Delay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.CreateFish), global::Nkclient.CreateFish.Parser, new[]{ "FishList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nkclient.ShotFishMsg), global::Nkclient.ShotFishMsg.Parser, new[]{ "SeatId", "CannonLevel", "FishList", "TargetPos", "KillList", "UserMoney" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 心跳0x1001
  /// CLIENT_SEND_USER_LOGIN_HALL             = 0x1002,
  /// </summary>
  public sealed partial class LoginHallReq : pb::IMessage<LoginHallReq> {
    private static readonly pb::MessageParser<LoginHallReq> _parser = new pb::MessageParser<LoginHallReq>(() => new LoginHallReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginHallReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginHallReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginHallReq(LoginHallReq other) : this() {
      uid_ = other.uid_;
      uuid_ = other.uuid_;
      gameid_ = other.gameid_;
      did_ = other.did_;
      clientVer_ = other.clientVer_;
      userLevel_ = other.userLevel_;
      userMoney_ = other.userMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginHallReq Clone() {
      return new LoginHallReq(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 3;
    private int gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gameid {
      get { return gameid_; }
      set {
        gameid_ = value;
      }
    }

    /// <summary>Field number for the "did" field.</summary>
    public const int DidFieldNumber = 4;
    private int did_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Did {
      get { return did_; }
      set {
        did_ = value;
      }
    }

    /// <summary>Field number for the "clientVer" field.</summary>
    public const int ClientVerFieldNumber = 5;
    private int clientVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVer {
      get { return clientVer_; }
      set {
        clientVer_ = value;
      }
    }

    /// <summary>Field number for the "userLevel" field.</summary>
    public const int UserLevelFieldNumber = 6;
    private int userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 7;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginHallReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginHallReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Uuid != other.Uuid) return false;
      if (Gameid != other.Gameid) return false;
      if (Did != other.Did) return false;
      if (ClientVer != other.ClientVer) return false;
      if (UserLevel != other.UserLevel) return false;
      if (UserMoney != other.UserMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Gameid != 0) hash ^= Gameid.GetHashCode();
      if (Did != 0) hash ^= Did.GetHashCode();
      if (ClientVer != 0) hash ^= ClientVer.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (Gameid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gameid);
      }
      if (Did != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Did);
      }
      if (ClientVer != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ClientVer);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UserLevel);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Gameid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gameid);
      }
      if (Did != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Did);
      }
      if (ClientVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVer);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserLevel);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginHallReq other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Gameid != 0) {
        Gameid = other.Gameid;
      }
      if (other.Did != 0) {
        Did = other.Did;
      }
      if (other.ClientVer != 0) {
        ClientVer = other.ClientVer;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 24: {
            Gameid = input.ReadInt32();
            break;
          }
          case 32: {
            Did = input.ReadInt32();
            break;
          }
          case 40: {
            ClientVer = input.ReadInt32();
            break;
          }
          case 48: {
            UserLevel = input.ReadInt32();
            break;
          }
          case 56: {
            UserMoney = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginHallResp : pb::IMessage<LoginHallResp> {
    private static readonly pb::MessageParser<LoginHallResp> _parser = new pb::MessageParser<LoginHallResp>(() => new LoginHallResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginHallResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginHallResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginHallResp(LoginHallResp other) : this() {
      ret_ = other.ret_;
      tid_ = other.tid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginHallResp Clone() {
      return new LoginHallResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///  0:登录成功，其他：错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginHallResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginHallResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Tid != other.Tid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginHallResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLIENT_SEND_USER_REQUEST_ALLOCATE_ROOM	= 0x1003,
  /// CLI_CHANGE_ROOM               = 0x1004  --用户请求换桌
  /// </summary>
  public sealed partial class AllocTableReq : pb::IMessage<AllocTableReq> {
    private static readonly pb::MessageParser<AllocTableReq> _parser = new pb::MessageParser<AllocTableReq>(() => new AllocTableReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocTableReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocTableReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocTableReq(AllocTableReq other) : this() {
      roomLevel_ = other.roomLevel_;
      userLevel_ = other.userLevel_;
      userMoney_ = other.userMoney_;
      tid_ = other.tid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocTableReq Clone() {
      return new AllocTableReq(this);
    }

    /// <summary>Field number for the "roomLevel" field.</summary>
    public const int RoomLevelFieldNumber = 1;
    private int roomLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomLevel {
      get { return roomLevel_; }
      set {
        roomLevel_ = value;
      }
    }

    /// <summary>Field number for the "userLevel" field.</summary>
    public const int UserLevelFieldNumber = 2;
    private int userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 4;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocTableReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocTableReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomLevel != other.RoomLevel) return false;
      if (UserLevel != other.UserLevel) return false;
      if (UserMoney != other.UserMoney) return false;
      if (Tid != other.Tid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomLevel != 0) hash ^= RoomLevel.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomLevel);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserLevel);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserMoney);
      }
      if (Tid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomLevel);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserLevel);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocTableReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomLevel != 0) {
        RoomLevel = other.RoomLevel;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomLevel = input.ReadInt32();
            break;
          }
          case 16: {
            UserLevel = input.ReadInt32();
            break;
          }
          case 24: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 32: {
            Tid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllocTableResp : pb::IMessage<AllocTableResp> {
    private static readonly pb::MessageParser<AllocTableResp> _parser = new pb::MessageParser<AllocTableResp>(() => new AllocTableResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocTableResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocTableResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocTableResp(AllocTableResp other) : this() {
      ret_ = other.ret_;
      tid_ = other.tid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocTableResp Clone() {
      return new AllocTableResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocTableResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocTableResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Tid != other.Tid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocTableResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SERVER_SEND_KICK_OUT_USER		        = 0x1101,
  /// </summary>
  public sealed partial class KickOutUser : pb::IMessage<KickOutUser> {
    private static readonly pb::MessageParser<KickOutUser> _parser = new pb::MessageParser<KickOutUser>(() => new KickOutUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickOutUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOutUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOutUser(KickOutUser other) : this() {
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOutUser Clone() {
      return new KickOutUser(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickOutUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickOutUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickOutUser other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TRACE_FRIEND                  =0x1005
  /// </summary>
  public sealed partial class TraceFriendReq : pb::IMessage<TraceFriendReq> {
    private static readonly pb::MessageParser<TraceFriendReq> _parser = new pb::MessageParser<TraceFriendReq>(() => new TraceFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceFriendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceFriendReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceFriendReq(TraceFriendReq other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceFriendReq Clone() {
      return new TraceFriendReq(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceFriendReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceFriendReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceFriendReq other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceFriendResp : pb::IMessage<TraceFriendResp> {
    private static readonly pb::MessageParser<TraceFriendResp> _parser = new pb::MessageParser<TraceFriendResp>(() => new TraceFriendResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceFriendResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceFriendResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceFriendResp(TraceFriendResp other) : this() {
      uid_ = other.uid_;
      status_ = other.status_;
      tid_ = other.tid_;
      roomLevel_ = other.roomLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceFriendResp Clone() {
      return new TraceFriendResp(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 3;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "roomLevel" field.</summary>
    public const int RoomLevelFieldNumber = 4;
    private int roomLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomLevel {
      get { return roomLevel_; }
      set {
        roomLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceFriendResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceFriendResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Status != other.Status) return false;
      if (Tid != other.Tid) return false;
      if (RoomLevel != other.RoomLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (RoomLevel != 0) hash ^= RoomLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Tid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tid);
      }
      if (RoomLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoomLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (RoomLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceFriendResp other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.RoomLevel != 0) {
        RoomLevel = other.RoomLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Tid = input.ReadInt32();
            break;
          }
          case 32: {
            RoomLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadcastMsg : pb::IMessage<BroadcastMsg> {
    private static readonly pb::MessageParser<BroadcastMsg> _parser = new pb::MessageParser<BroadcastMsg>(() => new BroadcastMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastMsg(BroadcastMsg other) : this() {
      uid_ = other.uid_;
      mtype_ = other.mtype_;
      info_ = other.info_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastMsg Clone() {
      return new BroadcastMsg(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "mtype" field.</summary>
    public const int MtypeFieldNumber = 2;
    private int mtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mtype {
      get { return mtype_; }
      set {
        mtype_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Mtype != other.Mtype) return false;
      if (Info != other.Info) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Mtype != 0) hash ^= Mtype.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Mtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mtype);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Mtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mtype);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastMsg other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Mtype != 0) {
        Mtype = other.Mtype;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Mtype = input.ReadInt32();
            break;
          }
          case 26: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LevelCount : pb::IMessage<LevelCount> {
    private static readonly pb::MessageParser<LevelCount> _parser = new pb::MessageParser<LevelCount>(() => new LevelCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelCount(LevelCount other) : this() {
      level_ = other.level_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelCount Clone() {
      return new LevelCount(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelCount other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_REQUEST_COUNT_OF_TABLE             =0x1006   --请求各场次人数
  /// </summary>
  public sealed partial class GetUserCountResp : pb::IMessage<GetUserCountResp> {
    private static readonly pb::MessageParser<GetUserCountResp> _parser = new pb::MessageParser<GetUserCountResp>(() => new GetUserCountResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserCountResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserCountResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserCountResp(GetUserCountResp other) : this() {
      levelList_ = other.levelList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserCountResp Clone() {
      return new GetUserCountResp(this);
    }

    /// <summary>Field number for the "levelList" field.</summary>
    public const int LevelListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.LevelCount> _repeated_levelList_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.LevelCount.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.LevelCount> levelList_ = new pbc::RepeatedField<global::Nkclient.LevelCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.LevelCount> LevelList {
      get { return levelList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserCountResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserCountResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!levelList_.Equals(other.levelList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= levelList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      levelList_.WriteTo(output, _repeated_levelList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += levelList_.CalculateSize(_repeated_levelList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserCountResp other) {
      if (other == null) {
        return;
      }
      levelList_.Add(other.levelList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            levelList_.AddEntriesFrom(input, _repeated_levelList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLIENT_MSG_LOGIN			= 0x0101,	// 登录
  /// </summary>
  public sealed partial class LoginGameReq : pb::IMessage<LoginGameReq> {
    private static readonly pb::MessageParser<LoginGameReq> _parser = new pb::MessageParser<LoginGameReq>(() => new LoginGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginGameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginGameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginGameReq(LoginGameReq other) : this() {
      uid_ = other.uid_;
      tid_ = other.tid_;
      did_ = other.did_;
      clientVer_ = other.clientVer_;
      mtkey_ = other.mtkey_;
      username_ = other.username_;
      baseInfo_ = other.baseInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginGameReq Clone() {
      return new LoginGameReq(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "did" field.</summary>
    public const int DidFieldNumber = 3;
    private int did_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Did {
      get { return did_; }
      set {
        did_ = value;
      }
    }

    /// <summary>Field number for the "clientVer" field.</summary>
    public const int ClientVerFieldNumber = 4;
    private int clientVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVer {
      get { return clientVer_; }
      set {
        clientVer_ = value;
      }
    }

    /// <summary>Field number for the "mtkey" field.</summary>
    public const int MtkeyFieldNumber = 5;
    private string mtkey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mtkey {
      get { return mtkey_; }
      set {
        mtkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 6;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseInfo" field.</summary>
    public const int BaseInfoFieldNumber = 7;
    private string baseInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseInfo {
      get { return baseInfo_; }
      set {
        baseInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginGameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginGameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Tid != other.Tid) return false;
      if (Did != other.Did) return false;
      if (ClientVer != other.ClientVer) return false;
      if (Mtkey != other.Mtkey) return false;
      if (Username != other.Username) return false;
      if (BaseInfo != other.BaseInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (Did != 0) hash ^= Did.GetHashCode();
      if (ClientVer != 0) hash ^= ClientVer.GetHashCode();
      if (Mtkey.Length != 0) hash ^= Mtkey.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (BaseInfo.Length != 0) hash ^= BaseInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
      if (Did != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Did);
      }
      if (ClientVer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ClientVer);
      }
      if (Mtkey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Mtkey);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Username);
      }
      if (BaseInfo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BaseInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (Did != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Did);
      }
      if (ClientVer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVer);
      }
      if (Mtkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mtkey);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (BaseInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginGameReq other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.Did != 0) {
        Did = other.Did;
      }
      if (other.ClientVer != 0) {
        ClientVer = other.ClientVer;
      }
      if (other.Mtkey.Length != 0) {
        Mtkey = other.Mtkey;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.BaseInfo.Length != 0) {
        BaseInfo = other.BaseInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
          case 24: {
            Did = input.ReadInt32();
            break;
          }
          case 32: {
            ClientVer = input.ReadInt32();
            break;
          }
          case 42: {
            Mtkey = input.ReadString();
            break;
          }
          case 50: {
            Username = input.ReadString();
            break;
          }
          case 58: {
            BaseInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      uid_ = other.uid_;
      seatId_ = other.seatId_;
      userStatus_ = other.userStatus_;
      online_ = other.online_;
      userInfo_ = other.userInfo_;
      curCarry_ = other.curCarry_;
      curAnte_ = other.curAnte_;
      wintimes_ = other.wintimes_;
      losetimes_ = other.losetimes_;
      specialCard_ = other.specialCard_;
      userMoney_ = other.userMoney_;
      addExp_ = other.addExp_;
      addMoney_ = other.addMoney_;
      cards_ = other.cards_.Clone();
      isShow_ = other.isShow_;
      bestCards_ = other.bestCards_.Clone();
      multiple_ = other.multiple_;
      roomFee_ = other.roomFee_;
      cardsCnt_ = other.cardsCnt_;
      index_ = other.index_;
      betInfo_ = other.betInfo_.Clone();
      settleState_ = other.settleState_;
      outCards_ = other.outCards_.Clone();
      vipLevel_ = other.vipLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "userStatus" field.</summary>
    public const int UserStatusFieldNumber = 3;
    private int userStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserStatus {
      get { return userStatus_; }
      set {
        userStatus_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private int online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 5;
    private string userInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 6;
    private long curCarry_;
    /// <summary>
    /// 携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "curAnte" field.</summary>
    public const int CurAnteFieldNumber = 7;
    private long curAnte_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurAnte {
      get { return curAnte_; }
      set {
        curAnte_ = value;
      }
    }

    /// <summary>Field number for the "wintimes" field.</summary>
    public const int WintimesFieldNumber = 8;
    private int wintimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wintimes {
      get { return wintimes_; }
      set {
        wintimes_ = value;
      }
    }

    /// <summary>Field number for the "losetimes" field.</summary>
    public const int LosetimesFieldNumber = 9;
    private int losetimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Losetimes {
      get { return losetimes_; }
      set {
        losetimes_ = value;
      }
    }

    /// <summary>Field number for the "specialCard" field.</summary>
    public const int SpecialCardFieldNumber = 10;
    private int specialCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialCard {
      get { return specialCard_; }
      set {
        specialCard_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 11;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "addExp" field.</summary>
    public const int AddExpFieldNumber = 12;
    private int addExp_;
    /// <summary>
    /// 结算时加的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddExp {
      get { return addExp_; }
      set {
        addExp_ = value;
      }
    }

    /// <summary>Field number for the "addMoney" field.</summary>
    public const int AddMoneyFieldNumber = 13;
    private int addMoney_;
    /// <summary>
    /// 结算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddMoney {
      get { return addMoney_; }
      set {
        addMoney_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(114, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "isShow" field.</summary>
    public const int IsShowFieldNumber = 15;
    private int isShow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsShow {
      get { return isShow_; }
      set {
        isShow_ = value;
      }
    }

    /// <summary>Field number for the "bestCards" field.</summary>
    public const int BestCardsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_bestCards_codec
        = pb::FieldCodec.ForMessage(130, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> bestCards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 最大牌组合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> BestCards {
      get { return bestCards_; }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 17;
    private int multiple_;
    /// <summary>
    /// 牌型倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "roomFee" field.</summary>
    public const int RoomFeeFieldNumber = 18;
    private int roomFee_;
    /// <summary>
    /// 台费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomFee {
      get { return roomFee_; }
      set {
        roomFee_ = value;
      }
    }

    /// <summary>Field number for the "cardsCnt" field.</summary>
    public const int CardsCntFieldNumber = 19;
    private int cardsCnt_;
    /// <summary>
    /// 牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsCnt {
      get { return cardsCnt_; }
      set {
        cardsCnt_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 20;
    private int index_;
    /// <summary>
    /// 位置编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "betInfo" field.</summary>
    public const int BetInfoFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Nkclient.BetInfo> _repeated_betInfo_codec
        = pb::FieldCodec.ForMessage(170, global::Nkclient.BetInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.BetInfo> betInfo_ = new pbc::RepeatedField<global::Nkclient.BetInfo>();
    /// <summary>
    /// 下注信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.BetInfo> BetInfo {
      get { return betInfo_; }
    }

    /// <summary>Field number for the "settleState" field.</summary>
    public const int SettleStateFieldNumber = 22;
    private int settleState_;
    /// <summary>
    /// 结算状态 0正常结算 1封顶 2包赔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SettleState {
      get { return settleState_; }
      set {
        settleState_ = value;
      }
    }

    /// <summary>Field number for the "outCards" field.</summary>
    public const int OutCardsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_outCards_codec
        = pb::FieldCodec.ForMessage(186, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> outCards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 当前回合出牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> OutCards {
      get { return outCards_; }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 24;
    private int vipLevel_;
    /// <summary>
    /// vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (SeatId != other.SeatId) return false;
      if (UserStatus != other.UserStatus) return false;
      if (Online != other.Online) return false;
      if (UserInfo != other.UserInfo) return false;
      if (CurCarry != other.CurCarry) return false;
      if (CurAnte != other.CurAnte) return false;
      if (Wintimes != other.Wintimes) return false;
      if (Losetimes != other.Losetimes) return false;
      if (SpecialCard != other.SpecialCard) return false;
      if (UserMoney != other.UserMoney) return false;
      if (AddExp != other.AddExp) return false;
      if (AddMoney != other.AddMoney) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (IsShow != other.IsShow) return false;
      if(!bestCards_.Equals(other.bestCards_)) return false;
      if (Multiple != other.Multiple) return false;
      if (RoomFee != other.RoomFee) return false;
      if (CardsCnt != other.CardsCnt) return false;
      if (Index != other.Index) return false;
      if(!betInfo_.Equals(other.betInfo_)) return false;
      if (SettleState != other.SettleState) return false;
      if(!outCards_.Equals(other.outCards_)) return false;
      if (VipLevel != other.VipLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (UserStatus != 0) hash ^= UserStatus.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      if (UserInfo.Length != 0) hash ^= UserInfo.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      if (CurAnte != 0L) hash ^= CurAnte.GetHashCode();
      if (Wintimes != 0) hash ^= Wintimes.GetHashCode();
      if (Losetimes != 0) hash ^= Losetimes.GetHashCode();
      if (SpecialCard != 0) hash ^= SpecialCard.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (AddExp != 0) hash ^= AddExp.GetHashCode();
      if (AddMoney != 0) hash ^= AddMoney.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (IsShow != 0) hash ^= IsShow.GetHashCode();
      hash ^= bestCards_.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (RoomFee != 0) hash ^= RoomFee.GetHashCode();
      if (CardsCnt != 0) hash ^= CardsCnt.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      hash ^= betInfo_.GetHashCode();
      if (SettleState != 0) hash ^= SettleState.GetHashCode();
      hash ^= outCards_.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatId);
      }
      if (UserStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserStatus);
      }
      if (Online != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Online);
      }
      if (UserInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserInfo);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CurCarry);
      }
      if (CurAnte != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CurAnte);
      }
      if (Wintimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Wintimes);
      }
      if (Losetimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Losetimes);
      }
      if (SpecialCard != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SpecialCard);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UserMoney);
      }
      if (AddExp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AddExp);
      }
      if (AddMoney != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AddMoney);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (IsShow != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(IsShow);
      }
      bestCards_.WriteTo(output, _repeated_bestCards_codec);
      if (Multiple != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Multiple);
      }
      if (RoomFee != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RoomFee);
      }
      if (CardsCnt != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CardsCnt);
      }
      if (Index != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Index);
      }
      betInfo_.WriteTo(output, _repeated_betInfo_codec);
      if (SettleState != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SettleState);
      }
      outCards_.WriteTo(output, _repeated_outCards_codec);
      if (VipLevel != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(VipLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (UserStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserStatus);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      if (UserInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserInfo);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      if (CurAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurAnte);
      }
      if (Wintimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wintimes);
      }
      if (Losetimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Losetimes);
      }
      if (SpecialCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialCard);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (AddExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddExp);
      }
      if (AddMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddMoney);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (IsShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsShow);
      }
      size += bestCards_.CalculateSize(_repeated_bestCards_codec);
      if (Multiple != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (RoomFee != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoomFee);
      }
      if (CardsCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CardsCnt);
      }
      if (Index != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      size += betInfo_.CalculateSize(_repeated_betInfo_codec);
      if (SettleState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SettleState);
      }
      size += outCards_.CalculateSize(_repeated_outCards_codec);
      if (VipLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.UserStatus != 0) {
        UserStatus = other.UserStatus;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
      if (other.UserInfo.Length != 0) {
        UserInfo = other.UserInfo;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      if (other.CurAnte != 0L) {
        CurAnte = other.CurAnte;
      }
      if (other.Wintimes != 0) {
        Wintimes = other.Wintimes;
      }
      if (other.Losetimes != 0) {
        Losetimes = other.Losetimes;
      }
      if (other.SpecialCard != 0) {
        SpecialCard = other.SpecialCard;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.AddExp != 0) {
        AddExp = other.AddExp;
      }
      if (other.AddMoney != 0) {
        AddMoney = other.AddMoney;
      }
      cards_.Add(other.cards_);
      if (other.IsShow != 0) {
        IsShow = other.IsShow;
      }
      bestCards_.Add(other.bestCards_);
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.RoomFee != 0) {
        RoomFee = other.RoomFee;
      }
      if (other.CardsCnt != 0) {
        CardsCnt = other.CardsCnt;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      betInfo_.Add(other.betInfo_);
      if (other.SettleState != 0) {
        SettleState = other.SettleState;
      }
      outCards_.Add(other.outCards_);
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadInt32();
            break;
          }
          case 24: {
            UserStatus = input.ReadInt32();
            break;
          }
          case 32: {
            Online = input.ReadInt32();
            break;
          }
          case 42: {
            UserInfo = input.ReadString();
            break;
          }
          case 48: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 56: {
            CurAnte = input.ReadInt64();
            break;
          }
          case 64: {
            Wintimes = input.ReadInt32();
            break;
          }
          case 72: {
            Losetimes = input.ReadInt32();
            break;
          }
          case 80: {
            SpecialCard = input.ReadInt32();
            break;
          }
          case 88: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 96: {
            AddExp = input.ReadInt32();
            break;
          }
          case 104: {
            AddMoney = input.ReadInt32();
            break;
          }
          case 114: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 120: {
            IsShow = input.ReadInt32();
            break;
          }
          case 130: {
            bestCards_.AddEntriesFrom(input, _repeated_bestCards_codec);
            break;
          }
          case 136: {
            Multiple = input.ReadInt32();
            break;
          }
          case 144: {
            RoomFee = input.ReadInt32();
            break;
          }
          case 152: {
            CardsCnt = input.ReadInt32();
            break;
          }
          case 160: {
            Index = input.ReadInt32();
            break;
          }
          case 170: {
            betInfo_.AddEntriesFrom(input, _repeated_betInfo_codec);
            break;
          }
          case 176: {
            SettleState = input.ReadInt32();
            break;
          }
          case 186: {
            outCards_.AddEntriesFrom(input, _repeated_outCards_codec);
            break;
          }
          case 192: {
            VipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableInfo : pb::IMessage<TableInfo> {
    private static readonly pb::MessageParser<TableInfo> _parser = new pb::MessageParser<TableInfo>(() => new TableInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo(TableInfo other) : this() {
      tid_ = other.tid_;
      level_ = other.level_;
      tableStatus_ = other.tableStatus_;
      bankSeatid_ = other.bankSeatid_;
      defaultAnte_ = other.defaultAnte_;
      totalAnte_ = other.totalAnte_;
      curSeatid_ = other.curSeatid_;
      leftTime_ = other.leftTime_;
      quickCall_ = other.quickCall_;
      minCall_ = other.minCall_;
      maxCall_ = other.maxCall_;
      roundTime_ = other.roundTime_;
      maxSeatCnt_ = other.maxSeatCnt_;
      minCarry_ = other.minCarry_;
      maxCarry_ = other.maxCarry_;
      defaultCarry_ = other.defaultCarry_;
      roomTab_ = other.roomTab_;
      boardCard_ = other.boardCard_.Clone();
      sysBanker_ = other.sysBanker_;
      boardCardTimes_ = other.boardCardTimes_;
      bankUserId_ = other.bankUserId_;
      leftCards_ = other.leftCards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableInfo Clone() {
      return new TableInfo(this);
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "tableStatus" field.</summary>
    public const int TableStatusFieldNumber = 4;
    private int tableStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableStatus {
      get { return tableStatus_; }
      set {
        tableStatus_ = value;
      }
    }

    /// <summary>Field number for the "bankSeatid" field.</summary>
    public const int BankSeatidFieldNumber = 5;
    private int bankSeatid_;
    /// <summary>
    /// 庄家座位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankSeatid {
      get { return bankSeatid_; }
      set {
        bankSeatid_ = value;
      }
    }

    /// <summary>Field number for the "defaultAnte" field.</summary>
    public const int DefaultAnteFieldNumber = 6;
    private long defaultAnte_;
    /// <summary>
    /// 底注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefaultAnte {
      get { return defaultAnte_; }
      set {
        defaultAnte_ = value;
      }
    }

    /// <summary>Field number for the "totalAnte" field.</summary>
    public const int TotalAnteFieldNumber = 7;
    private long totalAnte_;
    /// <summary>
    /// 桌上总筹码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAnte {
      get { return totalAnte_; }
      set {
        totalAnte_ = value;
      }
    }

    /// <summary>Field number for the "curSeatid" field.</summary>
    public const int CurSeatidFieldNumber = 8;
    private int curSeatid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurSeatid {
      get { return curSeatid_; }
      set {
        curSeatid_ = value;
      }
    }

    /// <summary>Field number for the "leftTime" field.</summary>
    public const int LeftTimeFieldNumber = 9;
    private int leftTime_;
    /// <summary>
    /// 操作剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    /// <summary>Field number for the "quickCall" field.</summary>
    public const int QuickCallFieldNumber = 10;
    private long quickCall_;
    /// <summary>
    /// 快速跟注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuickCall {
      get { return quickCall_; }
      set {
        quickCall_ = value;
      }
    }

    /// <summary>Field number for the "minCall" field.</summary>
    public const int MinCallFieldNumber = 11;
    private long minCall_;
    /// <summary>
    /// 最小加注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinCall {
      get { return minCall_; }
      set {
        minCall_ = value;
      }
    }

    /// <summary>Field number for the "maxCall" field.</summary>
    public const int MaxCallFieldNumber = 12;
    private long maxCall_;
    /// <summary>
    /// 最大加注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxCall {
      get { return maxCall_; }
      set {
        maxCall_ = value;
      }
    }

    /// <summary>Field number for the "roundTime" field.</summary>
    public const int RoundTimeFieldNumber = 13;
    private int roundTime_;
    /// <summary>
    /// 操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundTime {
      get { return roundTime_; }
      set {
        roundTime_ = value;
      }
    }

    /// <summary>Field number for the "maxSeatCnt" field.</summary>
    public const int MaxSeatCntFieldNumber = 14;
    private int maxSeatCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSeatCnt {
      get { return maxSeatCnt_; }
      set {
        maxSeatCnt_ = value;
      }
    }

    /// <summary>Field number for the "minCarry" field.</summary>
    public const int MinCarryFieldNumber = 15;
    private long minCarry_;
    /// <summary>
    /// 最小携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinCarry {
      get { return minCarry_; }
      set {
        minCarry_ = value;
      }
    }

    /// <summary>Field number for the "maxCarry" field.</summary>
    public const int MaxCarryFieldNumber = 16;
    private long maxCarry_;
    /// <summary>
    /// 最大携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxCarry {
      get { return maxCarry_; }
      set {
        maxCarry_ = value;
      }
    }

    /// <summary>Field number for the "defaultCarry" field.</summary>
    public const int DefaultCarryFieldNumber = 17;
    private long defaultCarry_;
    /// <summary>
    /// 默认携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefaultCarry {
      get { return defaultCarry_; }
      set {
        defaultCarry_ = value;
      }
    }

    /// <summary>Field number for the "roomTab" field.</summary>
    public const int RoomTabFieldNumber = 18;
    private int roomTab_;
    /// <summary>
    /// 初中高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomTab {
      get { return roomTab_; }
      set {
        roomTab_ = value;
      }
    }

    /// <summary>Field number for the "boardCard" field.</summary>
    public const int BoardCardFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_boardCard_codec
        = pb::FieldCodec.ForMessage(154, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> boardCard_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 桌面公共牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> BoardCard {
      get { return boardCard_; }
    }

    /// <summary>Field number for the "sysBanker" field.</summary>
    public const int SysBankerFieldNumber = 20;
    private int sysBanker_;
    /// <summary>
    /// 系统做庄 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SysBanker {
      get { return sysBanker_; }
      set {
        sysBanker_ = value;
      }
    }

    /// <summary>Field number for the "boardCardTimes" field.</summary>
    public const int BoardCardTimesFieldNumber = 21;
    private int boardCardTimes_;
    /// <summary>
    /// 公共牌倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardCardTimes {
      get { return boardCardTimes_; }
      set {
        boardCardTimes_ = value;
      }
    }

    /// <summary>Field number for the "bankUserId" field.</summary>
    public const int BankUserIdFieldNumber = 22;
    private int bankUserId_;
    /// <summary>
    /// 庄家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankUserId {
      get { return bankUserId_; }
      set {
        bankUserId_ = value;
      }
    }

    /// <summary>Field number for the "leftCards" field.</summary>
    public const int LeftCardsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_leftCards_codec
        = pb::FieldCodec.ForMessage(186, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> leftCards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 剩余牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> LeftCards {
      get { return leftCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tid != other.Tid) return false;
      if (Level != other.Level) return false;
      if (TableStatus != other.TableStatus) return false;
      if (BankSeatid != other.BankSeatid) return false;
      if (DefaultAnte != other.DefaultAnte) return false;
      if (TotalAnte != other.TotalAnte) return false;
      if (CurSeatid != other.CurSeatid) return false;
      if (LeftTime != other.LeftTime) return false;
      if (QuickCall != other.QuickCall) return false;
      if (MinCall != other.MinCall) return false;
      if (MaxCall != other.MaxCall) return false;
      if (RoundTime != other.RoundTime) return false;
      if (MaxSeatCnt != other.MaxSeatCnt) return false;
      if (MinCarry != other.MinCarry) return false;
      if (MaxCarry != other.MaxCarry) return false;
      if (DefaultCarry != other.DefaultCarry) return false;
      if (RoomTab != other.RoomTab) return false;
      if(!boardCard_.Equals(other.boardCard_)) return false;
      if (SysBanker != other.SysBanker) return false;
      if (BoardCardTimes != other.BoardCardTimes) return false;
      if (BankUserId != other.BankUserId) return false;
      if(!leftCards_.Equals(other.leftCards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (TableStatus != 0) hash ^= TableStatus.GetHashCode();
      if (BankSeatid != 0) hash ^= BankSeatid.GetHashCode();
      if (DefaultAnte != 0L) hash ^= DefaultAnte.GetHashCode();
      if (TotalAnte != 0L) hash ^= TotalAnte.GetHashCode();
      if (CurSeatid != 0) hash ^= CurSeatid.GetHashCode();
      if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
      if (QuickCall != 0L) hash ^= QuickCall.GetHashCode();
      if (MinCall != 0L) hash ^= MinCall.GetHashCode();
      if (MaxCall != 0L) hash ^= MaxCall.GetHashCode();
      if (RoundTime != 0) hash ^= RoundTime.GetHashCode();
      if (MaxSeatCnt != 0) hash ^= MaxSeatCnt.GetHashCode();
      if (MinCarry != 0L) hash ^= MinCarry.GetHashCode();
      if (MaxCarry != 0L) hash ^= MaxCarry.GetHashCode();
      if (DefaultCarry != 0L) hash ^= DefaultCarry.GetHashCode();
      if (RoomTab != 0) hash ^= RoomTab.GetHashCode();
      hash ^= boardCard_.GetHashCode();
      if (SysBanker != 0) hash ^= SysBanker.GetHashCode();
      if (BoardCardTimes != 0) hash ^= BoardCardTimes.GetHashCode();
      if (BankUserId != 0) hash ^= BankUserId.GetHashCode();
      hash ^= leftCards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (TableStatus != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableStatus);
      }
      if (BankSeatid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BankSeatid);
      }
      if (DefaultAnte != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(DefaultAnte);
      }
      if (TotalAnte != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalAnte);
      }
      if (CurSeatid != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurSeatid);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LeftTime);
      }
      if (QuickCall != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(QuickCall);
      }
      if (MinCall != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(MinCall);
      }
      if (MaxCall != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(MaxCall);
      }
      if (RoundTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RoundTime);
      }
      if (MaxSeatCnt != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxSeatCnt);
      }
      if (MinCarry != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(MinCarry);
      }
      if (MaxCarry != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(MaxCarry);
      }
      if (DefaultCarry != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(DefaultCarry);
      }
      if (RoomTab != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RoomTab);
      }
      boardCard_.WriteTo(output, _repeated_boardCard_codec);
      if (SysBanker != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SysBanker);
      }
      if (BoardCardTimes != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BoardCardTimes);
      }
      if (BankUserId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(BankUserId);
      }
      leftCards_.WriteTo(output, _repeated_leftCards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (TableStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableStatus);
      }
      if (BankSeatid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankSeatid);
      }
      if (DefaultAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefaultAnte);
      }
      if (TotalAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAnte);
      }
      if (CurSeatid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurSeatid);
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      if (QuickCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuickCall);
      }
      if (MinCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinCall);
      }
      if (MaxCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxCall);
      }
      if (RoundTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTime);
      }
      if (MaxSeatCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSeatCnt);
      }
      if (MinCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinCarry);
      }
      if (MaxCarry != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxCarry);
      }
      if (DefaultCarry != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DefaultCarry);
      }
      if (RoomTab != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoomTab);
      }
      size += boardCard_.CalculateSize(_repeated_boardCard_codec);
      if (SysBanker != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SysBanker);
      }
      if (BoardCardTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoardCardTimes);
      }
      if (BankUserId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BankUserId);
      }
      size += leftCards_.CalculateSize(_repeated_leftCards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableInfo other) {
      if (other == null) {
        return;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.TableStatus != 0) {
        TableStatus = other.TableStatus;
      }
      if (other.BankSeatid != 0) {
        BankSeatid = other.BankSeatid;
      }
      if (other.DefaultAnte != 0L) {
        DefaultAnte = other.DefaultAnte;
      }
      if (other.TotalAnte != 0L) {
        TotalAnte = other.TotalAnte;
      }
      if (other.CurSeatid != 0) {
        CurSeatid = other.CurSeatid;
      }
      if (other.LeftTime != 0) {
        LeftTime = other.LeftTime;
      }
      if (other.QuickCall != 0L) {
        QuickCall = other.QuickCall;
      }
      if (other.MinCall != 0L) {
        MinCall = other.MinCall;
      }
      if (other.MaxCall != 0L) {
        MaxCall = other.MaxCall;
      }
      if (other.RoundTime != 0) {
        RoundTime = other.RoundTime;
      }
      if (other.MaxSeatCnt != 0) {
        MaxSeatCnt = other.MaxSeatCnt;
      }
      if (other.MinCarry != 0L) {
        MinCarry = other.MinCarry;
      }
      if (other.MaxCarry != 0L) {
        MaxCarry = other.MaxCarry;
      }
      if (other.DefaultCarry != 0L) {
        DefaultCarry = other.DefaultCarry;
      }
      if (other.RoomTab != 0) {
        RoomTab = other.RoomTab;
      }
      boardCard_.Add(other.boardCard_);
      if (other.SysBanker != 0) {
        SysBanker = other.SysBanker;
      }
      if (other.BoardCardTimes != 0) {
        BoardCardTimes = other.BoardCardTimes;
      }
      if (other.BankUserId != 0) {
        BankUserId = other.BankUserId;
      }
      leftCards_.Add(other.leftCards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            TableStatus = input.ReadInt32();
            break;
          }
          case 40: {
            BankSeatid = input.ReadInt32();
            break;
          }
          case 48: {
            DefaultAnte = input.ReadInt64();
            break;
          }
          case 56: {
            TotalAnte = input.ReadInt64();
            break;
          }
          case 64: {
            CurSeatid = input.ReadInt32();
            break;
          }
          case 72: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 80: {
            QuickCall = input.ReadInt64();
            break;
          }
          case 88: {
            MinCall = input.ReadInt64();
            break;
          }
          case 96: {
            MaxCall = input.ReadInt64();
            break;
          }
          case 104: {
            RoundTime = input.ReadInt32();
            break;
          }
          case 112: {
            MaxSeatCnt = input.ReadInt32();
            break;
          }
          case 120: {
            MinCarry = input.ReadInt64();
            break;
          }
          case 128: {
            MaxCarry = input.ReadInt64();
            break;
          }
          case 136: {
            DefaultCarry = input.ReadInt64();
            break;
          }
          case 144: {
            RoomTab = input.ReadInt32();
            break;
          }
          case 154: {
            boardCard_.AddEntriesFrom(input, _repeated_boardCard_codec);
            break;
          }
          case 160: {
            SysBanker = input.ReadInt32();
            break;
          }
          case 168: {
            BoardCardTimes = input.ReadInt32();
            break;
          }
          case 176: {
            BankUserId = input.ReadInt32();
            break;
          }
          case 186: {
            leftCards_.AddEntriesFrom(input, _repeated_leftCards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录成功，发送桌面信息
  /// </summary>
  public sealed partial class SendTableInfo : pb::IMessage<SendTableInfo> {
    private static readonly pb::MessageParser<SendTableInfo> _parser = new pb::MessageParser<SendTableInfo>(() => new SendTableInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTableInfo(SendTableInfo other) : this() {
      ret_ = other.ret_;
      Table = other.table_ != null ? other.Table.Clone() : null;
      playerList_ = other.playerList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTableInfo Clone() {
      return new SendTableInfo(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 2;
    private global::Nkclient.TableInfo table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nkclient.TableInfo Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nkclient.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(26, global::Nkclient.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.PlayerInfo> playerList_ = new pbc::RepeatedField<global::Nkclient.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (table_ != null) hash ^= Table.GetHashCode();
      hash ^= playerList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (table_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Table);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTableInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::Nkclient.TableInfo();
        }
        Table.MergeFrom(other.Table);
      }
      playerList_.Add(other.playerList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            if (table_ == null) {
              table_ = new global::Nkclient.TableInfo();
            }
            input.ReadMessage(table_);
            break;
          }
          case 26: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_SIT_DOWN                  = 0x0102    --用户请求坐下
  /// </summary>
  public sealed partial class UserSitDownReq : pb::IMessage<UserSitDownReq> {
    private static readonly pb::MessageParser<UserSitDownReq> _parser = new pb::MessageParser<UserSitDownReq>(() => new UserSitDownReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSitDownReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSitDownReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSitDownReq(UserSitDownReq other) : this() {
      seatId_ = other.seatId_;
      ante_ = other.ante_;
      autoBuyin_ = other.autoBuyin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSitDownReq Clone() {
      return new UserSitDownReq(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 2;
    private long ante_;
    /// <summary>
    /// 携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "autoBuyin" field.</summary>
    public const int AutoBuyinFieldNumber = 3;
    private int autoBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoBuyin {
      get { return autoBuyin_; }
      set {
        autoBuyin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSitDownReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSitDownReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (Ante != other.Ante) return false;
      if (AutoBuyin != other.AutoBuyin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Ante != 0L) hash ^= Ante.GetHashCode();
      if (AutoBuyin != 0) hash ^= AutoBuyin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (Ante != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Ante);
      }
      if (AutoBuyin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AutoBuyin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Ante != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (AutoBuyin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoBuyin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSitDownReq other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Ante != 0L) {
        Ante = other.Ante;
      }
      if (other.AutoBuyin != 0) {
        AutoBuyin = other.AutoBuyin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            Ante = input.ReadInt64();
            break;
          }
          case 24: {
            AutoBuyin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSitDownResp : pb::IMessage<UserSitDownResp> {
    private static readonly pb::MessageParser<UserSitDownResp> _parser = new pb::MessageParser<UserSitDownResp>(() => new UserSitDownResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSitDownResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSitDownResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSitDownResp(UserSitDownResp other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSitDownResp Clone() {
      return new UserSitDownResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///  0:成功，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSitDownResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSitDownResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSitDownResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_SIT_DOWN            = 0x0201    --服务器广播用户坐下
  /// </summary>
  public sealed partial class SrvBroadcastSitDown : pb::IMessage<SrvBroadcastSitDown> {
    private static readonly pb::MessageParser<SrvBroadcastSitDown> _parser = new pb::MessageParser<SrvBroadcastSitDown>(() => new SrvBroadcastSitDown());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastSitDown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastSitDown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastSitDown(SrvBroadcastSitDown other) : this() {
      uid_ = other.uid_;
      seatId_ = other.seatId_;
      curCarry_ = other.curCarry_;
      userMoney_ = other.userMoney_;
      userInfo_ = other.userInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastSitDown Clone() {
      return new SrvBroadcastSitDown(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 3;
    private long curCarry_;
    /// <summary>
    /// 携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 4;
    private long userMoney_;
    /// <summary>
    /// 总钱数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 5;
    private string userInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastSitDown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastSitDown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (SeatId != other.SeatId) return false;
      if (CurCarry != other.CurCarry) return false;
      if (UserMoney != other.UserMoney) return false;
      if (UserInfo != other.UserInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (UserInfo.Length != 0) hash ^= UserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatId);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurCarry);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserMoney);
      }
      if (UserInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (UserInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastSitDown other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.UserInfo.Length != 0) {
        UserInfo = other.UserInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadInt32();
            break;
          }
          case 24: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 32: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 42: {
            UserInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAnte : pb::IMessage<UserAnte> {
    private static readonly pb::MessageParser<UserAnte> _parser = new pb::MessageParser<UserAnte>(() => new UserAnte());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAnte> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAnte() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAnte(UserAnte other) : this() {
      seatId_ = other.seatId_;
      curCarry_ = other.curCarry_;
      bonus_ = other.bonus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAnte Clone() {
      return new UserAnte(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 2;
    private long curCarry_;
    /// <summary>
    /// 当前携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 3;
    private long bonus_;
    /// <summary>
    /// 结算得奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAnte);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAnte other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (CurCarry != other.CurCarry) return false;
      if (Bonus != other.Bonus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      if (Bonus != 0L) hash ^= Bonus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurCarry);
      }
      if (Bonus != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      if (Bonus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAnte other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      if (other.Bonus != 0L) {
        Bonus = other.Bonus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 24: {
            Bonus = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      card_ = other.card_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int Card_FieldNumber = 1;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card_ {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Card_ != other.Card_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Card_ != 0) hash ^= Card_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Card_ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Card_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Card_ != 0) {
        Card_ = other.Card_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Card_ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_GAME_START                 = 0x0202    --服务器广播游戏开始,前端收到这个包后，跑下注动画
  /// </summary>
  public sealed partial class SrvSendGameStart : pb::IMessage<SrvSendGameStart> {
    private static readonly pb::MessageParser<SrvSendGameStart> _parser = new pb::MessageParser<SrvSendGameStart>(() => new SrvSendGameStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvSendGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvSendGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvSendGameStart(SrvSendGameStart other) : this() {
      bankSeatid_ = other.bankSeatid_;
      defaultAnte_ = other.defaultAnte_;
      totalAnte_ = other.totalAnte_;
      anteList_ = other.anteList_.Clone();
      cards_ = other.cards_.Clone();
      specialCard_ = other.specialCard_;
      cardsCnt_ = other.cardsCnt_;
      roundTime_ = other.roundTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvSendGameStart Clone() {
      return new SrvSendGameStart(this);
    }

    /// <summary>Field number for the "bankSeatid" field.</summary>
    public const int BankSeatidFieldNumber = 1;
    private int bankSeatid_;
    /// <summary>
    /// 庄家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankSeatid {
      get { return bankSeatid_; }
      set {
        bankSeatid_ = value;
      }
    }

    /// <summary>Field number for the "defaultAnte" field.</summary>
    public const int DefaultAnteFieldNumber = 2;
    private long defaultAnte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DefaultAnte {
      get { return defaultAnte_; }
      set {
        defaultAnte_ = value;
      }
    }

    /// <summary>Field number for the "totalAnte" field.</summary>
    public const int TotalAnteFieldNumber = 3;
    private long totalAnte_;
    /// <summary>
    /// 当前总下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAnte {
      get { return totalAnte_; }
      set {
        totalAnte_ = value;
      }
    }

    /// <summary>Field number for the "anteList" field.</summary>
    public const int AnteListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Nkclient.UserAnte> _repeated_anteList_codec
        = pb::FieldCodec.ForMessage(34, global::Nkclient.UserAnte.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.UserAnte> anteList_ = new pbc::RepeatedField<global::Nkclient.UserAnte>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.UserAnte> AnteList {
      get { return anteList_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(42, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 用户手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "specialCard" field.</summary>
    public const int SpecialCardFieldNumber = 6;
    private int specialCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialCard {
      get { return specialCard_; }
      set {
        specialCard_ = value;
      }
    }

    /// <summary>Field number for the "cardsCnt" field.</summary>
    public const int CardsCntFieldNumber = 7;
    private int cardsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsCnt {
      get { return cardsCnt_; }
      set {
        cardsCnt_ = value;
      }
    }

    /// <summary>Field number for the "roundTime" field.</summary>
    public const int RoundTimeFieldNumber = 8;
    private int roundTime_;
    /// <summary>
    ///  操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundTime {
      get { return roundTime_; }
      set {
        roundTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvSendGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvSendGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BankSeatid != other.BankSeatid) return false;
      if (DefaultAnte != other.DefaultAnte) return false;
      if (TotalAnte != other.TotalAnte) return false;
      if(!anteList_.Equals(other.anteList_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (SpecialCard != other.SpecialCard) return false;
      if (CardsCnt != other.CardsCnt) return false;
      if (RoundTime != other.RoundTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BankSeatid != 0) hash ^= BankSeatid.GetHashCode();
      if (DefaultAnte != 0L) hash ^= DefaultAnte.GetHashCode();
      if (TotalAnte != 0L) hash ^= TotalAnte.GetHashCode();
      hash ^= anteList_.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (SpecialCard != 0) hash ^= SpecialCard.GetHashCode();
      if (CardsCnt != 0) hash ^= CardsCnt.GetHashCode();
      if (RoundTime != 0) hash ^= RoundTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BankSeatid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BankSeatid);
      }
      if (DefaultAnte != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DefaultAnte);
      }
      if (TotalAnte != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalAnte);
      }
      anteList_.WriteTo(output, _repeated_anteList_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      if (SpecialCard != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SpecialCard);
      }
      if (CardsCnt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CardsCnt);
      }
      if (RoundTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoundTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BankSeatid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankSeatid);
      }
      if (DefaultAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DefaultAnte);
      }
      if (TotalAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAnte);
      }
      size += anteList_.CalculateSize(_repeated_anteList_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (SpecialCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialCard);
      }
      if (CardsCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsCnt);
      }
      if (RoundTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvSendGameStart other) {
      if (other == null) {
        return;
      }
      if (other.BankSeatid != 0) {
        BankSeatid = other.BankSeatid;
      }
      if (other.DefaultAnte != 0L) {
        DefaultAnte = other.DefaultAnte;
      }
      if (other.TotalAnte != 0L) {
        TotalAnte = other.TotalAnte;
      }
      anteList_.Add(other.anteList_);
      cards_.Add(other.cards_);
      if (other.SpecialCard != 0) {
        SpecialCard = other.SpecialCard;
      }
      if (other.CardsCnt != 0) {
        CardsCnt = other.CardsCnt;
      }
      if (other.RoundTime != 0) {
        RoundTime = other.RoundTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BankSeatid = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultAnte = input.ReadInt64();
            break;
          }
          case 24: {
            TotalAnte = input.ReadInt64();
            break;
          }
          case 34: {
            anteList_.AddEntriesFrom(input, _repeated_anteList_codec);
            break;
          }
          case 42: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 48: {
            SpecialCard = input.ReadInt32();
            break;
          }
          case 56: {
            CardsCnt = input.ReadInt32();
            break;
          }
          case 64: {
            RoundTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_STAND_UP                   = 0x0103    --用户请求站立
  /// </summary>
  public sealed partial class UserStandUpResp : pb::IMessage<UserStandUpResp> {
    private static readonly pb::MessageParser<UserStandUpResp> _parser = new pb::MessageParser<UserStandUpResp>(() => new UserStandUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserStandUpResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStandUpResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStandUpResp(UserStandUpResp other) : this() {
      userMoney_ = other.userMoney_;
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserStandUpResp Clone() {
      return new UserStandUpResp(this);
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 1;
    private long userMoney_;
    /// <summary>
    /// 用户金钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private int ret_;
    /// <summary>
    ///  0:成功，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserStandUpResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserStandUpResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserMoney != other.UserMoney) return false;
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserMoney != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserMoney);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserStandUpResp other) {
      if (other == null) {
        return;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_OTHER_STAND_UP             = 0x0203    --服务器广播用户站起
  /// </summary>
  public sealed partial class SrvBroadcastStandUp : pb::IMessage<SrvBroadcastStandUp> {
    private static readonly pb::MessageParser<SrvBroadcastStandUp> _parser = new pb::MessageParser<SrvBroadcastStandUp>(() => new SrvBroadcastStandUp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastStandUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastStandUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastStandUp(SrvBroadcastStandUp other) : this() {
      uid_ = other.uid_;
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastStandUp Clone() {
      return new SrvBroadcastStandUp(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 2;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastStandUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastStandUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (SeatId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastStandUp other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            SeatId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_SEND_TIP_TO_GIRL   = 0x0104    --玩家打赏小费   -- 不做
  /// </summary>
  public sealed partial class UserSendTipsReq : pb::IMessage<UserSendTipsReq> {
    private static readonly pb::MessageParser<UserSendTipsReq> _parser = new pb::MessageParser<UserSendTipsReq>(() => new UserSendTipsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSendTipsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendTipsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendTipsReq(UserSendTipsReq other) : this() {
      money_ = other.money_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendTipsReq Clone() {
      return new UserSendTipsReq(this);
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private long money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSendTipsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSendTipsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money != other.Money) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Money != 0L) hash ^= Money.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Money);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSendTipsReq other) {
      if (other == null) {
        return;
      }
      if (other.Money != 0L) {
        Money = other.Money;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSendTipsResp : pb::IMessage<UserSendTipsResp> {
    private static readonly pb::MessageParser<UserSendTipsResp> _parser = new pb::MessageParser<UserSendTipsResp>(() => new UserSendTipsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSendTipsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendTipsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendTipsResp(UserSendTipsResp other) : this() {
      ret_ = other.ret_;
      count_ = other.count_;
      curCarry_ = other.curCarry_;
      userMoney_ = other.userMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendTipsResp Clone() {
      return new UserSendTipsResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    /// <summary>
    /// 打赏金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 3;
    private long curCarry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 4;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSendTipsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSendTipsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Count != other.Count) return false;
      if (CurCarry != other.CurCarry) return false;
      if (UserMoney != other.UserMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurCarry);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSendTipsResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
          case 24: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 32: {
            UserMoney = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_SEND_ROOM_COST_PROP                   = 0x0105   --玩家发送付费表情、道具
  /// </summary>
  public sealed partial class UserSendPropReq : pb::IMessage<UserSendPropReq> {
    private static readonly pb::MessageParser<UserSendPropReq> _parser = new pb::MessageParser<UserSendPropReq>(() => new UserSendPropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSendPropReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendPropReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendPropReq(UserSendPropReq other) : this() {
      money_ = other.money_;
      type_ = other.type_;
      id_ = other.id_;
      seatId_ = other.seatId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendPropReq Clone() {
      return new UserSendPropReq(this);
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private long money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 4;
    private int seatId_;
    /// <summary>
    /// 目标座位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSendPropReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSendPropReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money != other.Money) return false;
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (SeatId != other.SeatId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Money != 0L) hash ^= Money.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Money);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id);
      }
      if (SeatId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeatId);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSendPropReq other) {
      if (other == null) {
        return;
      }
      if (other.Money != 0L) {
        Money = other.Money;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Id = input.ReadInt32();
            break;
          }
          case 32: {
            SeatId = input.ReadInt32();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSendPropResp : pb::IMessage<UserSendPropResp> {
    private static readonly pb::MessageParser<UserSendPropResp> _parser = new pb::MessageParser<UserSendPropResp>(() => new UserSendPropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSendPropResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendPropResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendPropResp(UserSendPropResp other) : this() {
      ret_ = other.ret_;
      price_ = other.price_;
      curCarry_ = other.curCarry_;
      userMoney_ = other.userMoney_;
      type_ = other.type_;
      id_ = other.id_;
      seatId_ = other.seatId_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSendPropResp Clone() {
      return new UserSendPropResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private long price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 3;
    private long curCarry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 4;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 6;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 7;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSendPropResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSendPropResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Price != other.Price) return false;
      if (CurCarry != other.CurCarry) return false;
      if (UserMoney != other.UserMoney) return false;
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (SeatId != other.SeatId) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Price != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Price);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurCarry);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserMoney);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Id);
      }
      if (SeatId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SeatId);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSendPropResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt64();
            break;
          }
          case 24: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 32: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Id = input.ReadInt32();
            break;
          }
          case 56: {
            SeatId = input.ReadInt32();
            break;
          }
          case 64: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVN_AUTO_ADD_MIN_CHIPS                    =0x0204         --自动买入筹码服务器通知
  /// </summary>
  public sealed partial class AutoBuyinResp : pb::IMessage<AutoBuyinResp> {
    private static readonly pb::MessageParser<AutoBuyinResp> _parser = new pb::MessageParser<AutoBuyinResp>(() => new AutoBuyinResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoBuyinResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBuyinResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBuyinResp(AutoBuyinResp other) : this() {
      curCarry_ = other.curCarry_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoBuyinResp Clone() {
      return new AutoBuyinResp(this);
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 1;
    private long curCarry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoBuyinResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoBuyinResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurCarry != other.CurCarry) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurCarry != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurCarry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoBuyinResp other) {
      if (other == null) {
        return;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurCarry = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_NEXT_BET       = 0x0205    
  /// --服务器广播下一个操作的玩家。若轮到自己时，玩家加注拉到自已的携带值时，前端要显示ALLIN字样
  /// </summary>
  public sealed partial class SrvSendNextOperate : pb::IMessage<SrvSendNextOperate> {
    private static readonly pb::MessageParser<SrvSendNextOperate> _parser = new pb::MessageParser<SrvSendNextOperate>(() => new SrvSendNextOperate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvSendNextOperate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvSendNextOperate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvSendNextOperate(SrvSendNextOperate other) : this() {
      seatId_ = other.seatId_;
      leftTime_ = other.leftTime_;
      minCall_ = other.minCall_;
      maxCall_ = other.maxCall_;
      quickCall_ = other.quickCall_;
      operate_ = other.operate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvSendNextOperate Clone() {
      return new SrvSendNextOperate(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "leftTime" field.</summary>
    public const int LeftTimeFieldNumber = 2;
    private int leftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    /// <summary>Field number for the "minCall" field.</summary>
    public const int MinCallFieldNumber = 3;
    private long minCall_;
    /// <summary>
    /// 最小加注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinCall {
      get { return minCall_; }
      set {
        minCall_ = value;
      }
    }

    /// <summary>Field number for the "maxCall" field.</summary>
    public const int MaxCallFieldNumber = 4;
    private long maxCall_;
    /// <summary>
    /// 最大加注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxCall {
      get { return maxCall_; }
      set {
        maxCall_ = value;
      }
    }

    /// <summary>Field number for the "quickCall" field.</summary>
    public const int QuickCallFieldNumber = 5;
    private long quickCall_;
    /// <summary>
    /// 跟注    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuickCall {
      get { return quickCall_; }
      set {
        quickCall_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 6;
    private int operate_;
    /// <summary>
    /// 跟注    --0 叫地主 抢地主 出牌 接牌 过牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvSendNextOperate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvSendNextOperate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (LeftTime != other.LeftTime) return false;
      if (MinCall != other.MinCall) return false;
      if (MaxCall != other.MaxCall) return false;
      if (QuickCall != other.QuickCall) return false;
      if (Operate != other.Operate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
      if (MinCall != 0L) hash ^= MinCall.GetHashCode();
      if (MaxCall != 0L) hash ^= MaxCall.GetHashCode();
      if (QuickCall != 0L) hash ^= QuickCall.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftTime);
      }
      if (MinCall != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MinCall);
      }
      if (MaxCall != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxCall);
      }
      if (QuickCall != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(QuickCall);
      }
      if (Operate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Operate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      if (MinCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinCall);
      }
      if (MaxCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxCall);
      }
      if (QuickCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuickCall);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvSendNextOperate other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.LeftTime != 0) {
        LeftTime = other.LeftTime;
      }
      if (other.MinCall != 0L) {
        MinCall = other.MinCall;
      }
      if (other.MaxCall != 0L) {
        MaxCall = other.MaxCall;
      }
      if (other.QuickCall != 0L) {
        QuickCall = other.QuickCall;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 24: {
            MinCall = input.ReadInt64();
            break;
          }
          case 32: {
            MaxCall = input.ReadInt64();
            break;
          }
          case 40: {
            QuickCall = input.ReadInt64();
            break;
          }
          case 48: {
            Operate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_SET_BET                    = 0x0107    --玩家发送操作
  /// </summary>
  public sealed partial class UserOperateReq : pb::IMessage<UserOperateReq> {
    private static readonly pb::MessageParser<UserOperateReq> _parser = new pb::MessageParser<UserOperateReq>(() => new UserOperateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserOperateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserOperateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserOperateReq(UserOperateReq other) : this() {
      operate_ = other.operate_;
      ante_ = other.ante_;
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserOperateReq Clone() {
      return new UserOperateReq(this);
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 1;
    private int operate_;
    /// <summary>
    /// 1: 看牌，2: 弃牌，3: 跟注, 4: 加注  --斗地主： 1叫地主 2抢地主 3出牌 4过 5托管
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 2;
    private long ante_;
    /// <summary>
    /// 下注金额        0取消 1确认
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 操作的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserOperateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserOperateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operate != other.Operate) return false;
      if (Ante != other.Ante) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (Ante != 0L) hash ^= Ante.GetHashCode();
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Operate);
      }
      if (Ante != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Ante);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      if (Ante != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserOperateReq other) {
      if (other == null) {
        return;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.Ante != 0L) {
        Ante = other.Ante;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Operate = input.ReadInt32();
            break;
          }
          case 16: {
            Ante = input.ReadInt64();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_SET_BET  --服务器回复玩家操作结果,若跟注或加注成功，前端要自已去更新携带金币数
  /// </summary>
  public sealed partial class UserOperateResp : pb::IMessage<UserOperateResp> {
    private static readonly pb::MessageParser<UserOperateResp> _parser = new pb::MessageParser<UserOperateResp>(() => new UserOperateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserOperateResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserOperateResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserOperateResp(UserOperateResp other) : this() {
      ret_ = other.ret_;
      operate_ = other.operate_;
      curCarry_ = other.curCarry_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserOperateResp Clone() {
      return new UserOperateResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    /// 0成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 2;
    private int operate_;
    /// <summary>
    /// 1: 看牌，2: 弃牌，3: 跟注, 4: 加注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 3;
    private long curCarry_;
    /// <summary>
    /// 剩余携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserOperateResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserOperateResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Operate != other.Operate) return false;
      if (CurCarry != other.CurCarry) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Operate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Operate);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurCarry);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserOperateResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Operate = input.ReadInt32();
            break;
          }
          case 24: {
            CurCarry = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_BET                   = 0x0206    --服务器广播玩家操作.若是加注或跟注，前端要自已去判断是否属于AllIn操作
  /// </summary>
  public sealed partial class SrvBroadcastOperate : pb::IMessage<SrvBroadcastOperate> {
    private static readonly pb::MessageParser<SrvBroadcastOperate> _parser = new pb::MessageParser<SrvBroadcastOperate>(() => new SrvBroadcastOperate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastOperate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastOperate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastOperate(SrvBroadcastOperate other) : this() {
      seatId_ = other.seatId_;
      userStatus_ = other.userStatus_;
      curAnte_ = other.curAnte_;
      curCarry_ = other.curCarry_;
      totalAnte_ = other.totalAnte_;
      operate_ = other.operate_;
      cards_ = other.cards_.Clone();
      cardType_ = other.cardType_;
      times_ = other.times_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastOperate Clone() {
      return new SrvBroadcastOperate(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "userStatus" field.</summary>
    public const int UserStatusFieldNumber = 2;
    private int userStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserStatus {
      get { return userStatus_; }
      set {
        userStatus_ = value;
      }
    }

    /// <summary>Field number for the "curAnte" field.</summary>
    public const int CurAnteFieldNumber = 3;
    private long curAnte_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurAnte {
      get { return curAnte_; }
      set {
        curAnte_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 4;
    private long curCarry_;
    /// <summary>
    /// 剩余携带
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "totalAnte" field.</summary>
    public const int TotalAnteFieldNumber = 5;
    private long totalAnte_;
    /// <summary>
    /// 奖池总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAnte {
      get { return totalAnte_; }
      set {
        totalAnte_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 6;
    private int operate_;
    /// <summary>
    /// 当前操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(58, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 操作的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 8;
    private int cardType_;
    /// <summary>
    /// 牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 9;
    private int times_;
    /// <summary>
    /// 当前操作产生的倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastOperate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastOperate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (UserStatus != other.UserStatus) return false;
      if (CurAnte != other.CurAnte) return false;
      if (CurCarry != other.CurCarry) return false;
      if (TotalAnte != other.TotalAnte) return false;
      if (Operate != other.Operate) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (CardType != other.CardType) return false;
      if (Times != other.Times) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (UserStatus != 0) hash ^= UserStatus.GetHashCode();
      if (CurAnte != 0L) hash ^= CurAnte.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      if (TotalAnte != 0L) hash ^= TotalAnte.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (UserStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserStatus);
      }
      if (CurAnte != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurAnte);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurCarry);
      }
      if (TotalAnte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalAnte);
      }
      if (Operate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Operate);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (CardType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CardType);
      }
      if (Times != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (UserStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserStatus);
      }
      if (CurAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurAnte);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      if (TotalAnte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAnte);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastOperate other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.UserStatus != 0) {
        UserStatus = other.UserStatus;
      }
      if (other.CurAnte != 0L) {
        CurAnte = other.CurAnte;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      if (other.TotalAnte != 0L) {
        TotalAnte = other.TotalAnte;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      cards_.Add(other.cards_);
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            UserStatus = input.ReadInt32();
            break;
          }
          case 24: {
            CurAnte = input.ReadInt64();
            break;
          }
          case 32: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 40: {
            TotalAnte = input.ReadInt64();
            break;
          }
          case 48: {
            Operate = input.ReadInt32();
            break;
          }
          case 58: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 64: {
            CardType = input.ReadInt32();
            break;
          }
          case 72: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Seat : pb::IMessage<Seat> {
    private static readonly pb::MessageParser<Seat> _parser = new pb::MessageParser<Seat>(() => new Seat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Seat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seat(Seat other) : this() {
      seatId_ = other.seatId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seat Clone() {
      return new Seat(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Seat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Seat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Seat other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvBroadcastThirdCard : pb::IMessage<SrvBroadcastThirdCard> {
    private static readonly pb::MessageParser<SrvBroadcastThirdCard> _parser = new pb::MessageParser<SrvBroadcastThirdCard>(() => new SrvBroadcastThirdCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastThirdCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastThirdCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastThirdCard(SrvBroadcastThirdCard other) : this() {
      seatList_ = other.seatList_.Clone();
      cards_ = other.cards_.Clone();
      specialCard_ = other.specialCard_;
      cardsCnt_ = other.cardsCnt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastThirdCard Clone() {
      return new SrvBroadcastThirdCard(this);
    }

    /// <summary>Field number for the "seatList" field.</summary>
    public const int SeatListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.Seat> _repeated_seatList_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.Seat.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Seat> seatList_ = new pbc::RepeatedField<global::Nkclient.Seat>();
    /// <summary>
    /// 发牌的座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Seat> SeatList {
      get { return seatList_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 自己的手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "specialCard" field.</summary>
    public const int SpecialCardFieldNumber = 3;
    private int specialCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialCard {
      get { return specialCard_; }
      set {
        specialCard_ = value;
      }
    }

    /// <summary>Field number for the "cardsCnt" field.</summary>
    public const int CardsCntFieldNumber = 4;
    private int cardsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsCnt {
      get { return cardsCnt_; }
      set {
        cardsCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastThirdCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastThirdCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!seatList_.Equals(other.seatList_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (SpecialCard != other.SpecialCard) return false;
      if (CardsCnt != other.CardsCnt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= seatList_.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (SpecialCard != 0) hash ^= SpecialCard.GetHashCode();
      if (CardsCnt != 0) hash ^= CardsCnt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      seatList_.WriteTo(output, _repeated_seatList_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      if (SpecialCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecialCard);
      }
      if (CardsCnt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardsCnt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += seatList_.CalculateSize(_repeated_seatList_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (SpecialCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialCard);
      }
      if (CardsCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsCnt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastThirdCard other) {
      if (other == null) {
        return;
      }
      seatList_.Add(other.seatList_);
      cards_.Add(other.cards_);
      if (other.SpecialCard != 0) {
        SpecialCard = other.SpecialCard;
      }
      if (other.CardsCnt != 0) {
        CardsCnt = other.CardsCnt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            seatList_.AddEntriesFrom(input, _repeated_seatList_codec);
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 24: {
            SpecialCard = input.ReadInt32();
            break;
          }
          case 32: {
            CardsCnt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BonusInfo : pb::IMessage<BonusInfo> {
    private static readonly pb::MessageParser<BonusInfo> _parser = new pb::MessageParser<BonusInfo>(() => new BonusInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BonusInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusInfo(BonusInfo other) : this() {
      moneyPool_ = other.moneyPool_;
      antes_ = other.antes_.Clone();
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusInfo Clone() {
      return new BonusInfo(this);
    }

    /// <summary>Field number for the "moneyPool" field.</summary>
    public const int MoneyPoolFieldNumber = 1;
    private long moneyPool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MoneyPool {
      get { return moneyPool_; }
      set {
        moneyPool_ = value;
      }
    }

    /// <summary>Field number for the "antes" field.</summary>
    public const int AntesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nkclient.UserAnte> _repeated_antes_codec
        = pb::FieldCodec.ForMessage(18, global::Nkclient.UserAnte.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.UserAnte> antes_ = new pbc::RepeatedField<global::Nkclient.UserAnte>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.UserAnte> Antes {
      get { return antes_; }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    /// <summary>
    /// 牛牛是第几个池子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BonusInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BonusInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoneyPool != other.MoneyPool) return false;
      if(!antes_.Equals(other.antes_)) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoneyPool != 0L) hash ^= MoneyPool.GetHashCode();
      hash ^= antes_.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoneyPool != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MoneyPool);
      }
      antes_.WriteTo(output, _repeated_antes_codec);
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoneyPool != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MoneyPool);
      }
      size += antes_.CalculateSize(_repeated_antes_codec);
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BonusInfo other) {
      if (other == null) {
        return;
      }
      if (other.MoneyPool != 0L) {
        MoneyPool = other.MoneyPool;
      }
      antes_.Add(other.antes_);
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoneyPool = input.ReadInt64();
            break;
          }
          case 18: {
            antes_.AddEntriesFrom(input, _repeated_antes_codec);
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SVR_GAME_OVER                  = 0x0208    --服务器广播牌局结束，结算结果,前端自已跑一系列动画
  /// </summary>
  public sealed partial class SrvBroadcastGameOver : pb::IMessage<SrvBroadcastGameOver> {
    private static readonly pb::MessageParser<SrvBroadcastGameOver> _parser = new pb::MessageParser<SrvBroadcastGameOver>(() => new SrvBroadcastGameOver());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastGameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastGameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastGameOver(SrvBroadcastGameOver other) : this() {
      playerList_ = other.playerList_.Clone();
      bonusList_ = other.bonusList_.Clone();
      cards_ = other.cards_.Clone();
      result_ = other.result_;
      isSpring_ = other.isSpring_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastGameOver Clone() {
      return new SrvBroadcastGameOver(this);
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.PlayerInfo> playerList_ = new pbc::RepeatedField<global::Nkclient.PlayerInfo>();
    /// <summary>
    /// 玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "bonusList" field.</summary>
    public const int BonusListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nkclient.BonusInfo> _repeated_bonusList_codec
        = pb::FieldCodec.ForMessage(18, global::Nkclient.BonusInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.BonusInfo> bonusList_ = new pbc::RepeatedField<global::Nkclient.BonusInfo>();
    /// <summary>
    /// 奖池列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.BonusInfo> BonusList {
      get { return bonusList_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 公共牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private int result_;
    /// <summary>
    /// 1地主赢 2农民赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "isSpring" field.</summary>
    public const int IsSpringFieldNumber = 5;
    private int isSpring_;
    /// <summary>
    /// 是否是春天
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSpring {
      get { return isSpring_; }
      set {
        isSpring_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastGameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastGameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!bonusList_.Equals(other.bonusList_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (Result != other.Result) return false;
      if (IsSpring != other.IsSpring) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerList_.GetHashCode();
      hash ^= bonusList_.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (IsSpring != 0) hash ^= IsSpring.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerList_.WriteTo(output, _repeated_playerList_codec);
      bonusList_.WriteTo(output, _repeated_bonusList_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Result);
      }
      if (IsSpring != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsSpring);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += bonusList_.CalculateSize(_repeated_bonusList_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (IsSpring != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSpring);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastGameOver other) {
      if (other == null) {
        return;
      }
      playerList_.Add(other.playerList_);
      bonusList_.Add(other.bonusList_);
      cards_.Add(other.cards_);
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.IsSpring != 0) {
        IsSpring = other.IsSpring;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 18: {
            bonusList_.AddEntriesFrom(input, _repeated_bonusList_codec);
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 32: {
            Result = input.ReadInt32();
            break;
          }
          case 40: {
            IsSpring = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLI_LOGOUT_ROOM                = 0x0108    --用户请求离开房间
  /// </summary>
  public sealed partial class UserLogoutResp : pb::IMessage<UserLogoutResp> {
    private static readonly pb::MessageParser<UserLogoutResp> _parser = new pb::MessageParser<UserLogoutResp>(() => new UserLogoutResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLogoutResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLogoutResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLogoutResp(UserLogoutResp other) : this() {
      ret_ = other.ret_;
      userMoney_ = other.userMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLogoutResp Clone() {
      return new UserLogoutResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 2;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLogoutResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLogoutResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (UserMoney != other.UserMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLogoutResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            UserMoney = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserDropCards : pb::IMessage<UserDropCards> {
    private static readonly pb::MessageParser<UserDropCards> _parser = new pb::MessageParser<UserDropCards>(() => new UserDropCards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserDropCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDropCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDropCards(UserDropCards other) : this() {
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserDropCards Clone() {
      return new UserDropCards(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserDropCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserDropCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserDropCards other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SrvBroadcastDropCards : pb::IMessage<SrvBroadcastDropCards> {
    private static readonly pb::MessageParser<SrvBroadcastDropCards> _parser = new pb::MessageParser<SrvBroadcastDropCards>(() => new SrvBroadcastDropCards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastDropCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastDropCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastDropCards(SrvBroadcastDropCards other) : this() {
      seatId_ = other.seatId_;
      cardsCnt_ = other.cardsCnt_;
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastDropCards Clone() {
      return new SrvBroadcastDropCards(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "cardsCnt" field.</summary>
    public const int CardsCntFieldNumber = 2;
    private int cardsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardsCnt {
      get { return cardsCnt_; }
      set {
        cardsCnt_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastDropCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastDropCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (CardsCnt != other.CardsCnt) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (CardsCnt != 0) hash ^= CardsCnt.GetHashCode();
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (CardsCnt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardsCnt);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (CardsCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardsCnt);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastDropCards other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.CardsCnt != 0) {
        CardsCnt = other.CardsCnt;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            CardsCnt = input.ReadInt32();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShowCards : pb::IMessage<ShowCards> {
    private static readonly pb::MessageParser<ShowCards> _parser = new pb::MessageParser<ShowCards>(() => new ShowCards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowCards(ShowCards other) : this() {
      seatId_ = other.seatId_;
      cards_ = other.cards_.Clone();
      specialCard_ = other.specialCard_;
      multiple_ = other.multiple_;
      isWin_ = other.isWin_;
      roundTime_ = other.roundTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowCards Clone() {
      return new ShowCards(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "specialCard" field.</summary>
    public const int SpecialCardFieldNumber = 3;
    private int specialCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialCard {
      get { return specialCard_; }
      set {
        specialCard_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 4;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "isWin" field.</summary>
    public const int IsWinFieldNumber = 5;
    private int isWin_;
    /// <summary>
    /// 比牌结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    /// <summary>Field number for the "roundTime" field.</summary>
    public const int RoundTimeFieldNumber = 6;
    private int roundTime_;
    /// <summary>
    /// 操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundTime {
      get { return roundTime_; }
      set {
        roundTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (SpecialCard != other.SpecialCard) return false;
      if (Multiple != other.Multiple) return false;
      if (IsWin != other.IsWin) return false;
      if (RoundTime != other.RoundTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (SpecialCard != 0) hash ^= SpecialCard.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (IsWin != 0) hash ^= IsWin.GetHashCode();
      if (RoundTime != 0) hash ^= RoundTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (SpecialCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecialCard);
      }
      if (Multiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Multiple);
      }
      if (IsWin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsWin);
      }
      if (RoundTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoundTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (SpecialCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialCard);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (IsWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsWin);
      }
      if (RoundTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowCards other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      cards_.Add(other.cards_);
      if (other.SpecialCard != 0) {
        SpecialCard = other.SpecialCard;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.IsWin != 0) {
        IsWin = other.IsWin;
      }
      if (other.RoundTime != 0) {
        RoundTime = other.RoundTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 24: {
            SpecialCard = input.ReadInt32();
            break;
          }
          case 32: {
            Multiple = input.ReadInt32();
            break;
          }
          case 40: {
            IsWin = input.ReadInt32();
            break;
          }
          case 48: {
            RoundTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0x20D  --广播发牌
  /// </summary>
  public sealed partial class SrvBroadcastUserCard : pb::IMessage<SrvBroadcastUserCard> {
    private static readonly pb::MessageParser<SrvBroadcastUserCard> _parser = new pb::MessageParser<SrvBroadcastUserCard>(() => new SrvBroadcastUserCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastUserCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastUserCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastUserCard(SrvBroadcastUserCard other) : this() {
      userCards_ = other.userCards_.Clone();
      tableStatus_ = other.tableStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastUserCard Clone() {
      return new SrvBroadcastUserCard(this);
    }

    /// <summary>Field number for the "userCards" field.</summary>
    public const int UserCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.ShowCards> _repeated_userCards_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.ShowCards.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.ShowCards> userCards_ = new pbc::RepeatedField<global::Nkclient.ShowCards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.ShowCards> UserCards {
      get { return userCards_; }
    }

    /// <summary>Field number for the "tableStatus" field.</summary>
    public const int TableStatusFieldNumber = 2;
    private int tableStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableStatus {
      get { return tableStatus_; }
      set {
        tableStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastUserCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastUserCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userCards_.Equals(other.userCards_)) return false;
      if (TableStatus != other.TableStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userCards_.GetHashCode();
      if (TableStatus != 0) hash ^= TableStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userCards_.WriteTo(output, _repeated_userCards_codec);
      if (TableStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userCards_.CalculateSize(_repeated_userCards_codec);
      if (TableStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastUserCard other) {
      if (other == null) {
        return;
      }
      userCards_.Add(other.userCards_);
      if (other.TableStatus != 0) {
        TableStatus = other.TableStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userCards_.AddEntriesFrom(input, _repeated_userCards_codec);
            break;
          }
          case 16: {
            TableStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 0x20E --广播开始确认牌型
  /// </summary>
  public sealed partial class SrvBroadcastCheckCard : pb::IMessage<SrvBroadcastCheckCard> {
    private static readonly pb::MessageParser<SrvBroadcastCheckCard> _parser = new pb::MessageParser<SrvBroadcastCheckCard>(() => new SrvBroadcastCheckCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastCheckCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastCheckCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastCheckCard(SrvBroadcastCheckCard other) : this() {
      showTime_ = other.showTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastCheckCard Clone() {
      return new SrvBroadcastCheckCard(this);
    }

    /// <summary>Field number for the "showTime" field.</summary>
    public const int ShowTimeFieldNumber = 1;
    private int showTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowTime {
      get { return showTime_; }
      set {
        showTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastCheckCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastCheckCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowTime != other.ShowTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowTime != 0) hash ^= ShowTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShowTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastCheckCard other) {
      if (other == null) {
        return;
      }
      if (other.ShowTime != 0) {
        ShowTime = other.ShowTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSlotBetReq : pb::IMessage<UserSlotBetReq> {
    private static readonly pb::MessageParser<UserSlotBetReq> _parser = new pb::MessageParser<UserSlotBetReq>(() => new UserSlotBetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSlotBetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSlotBetReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSlotBetReq(UserSlotBetReq other) : this() {
      lines_ = other.lines_;
      chips_ = other.chips_;
      isUseProps_ = other.isUseProps_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSlotBetReq Clone() {
      return new UserSlotBetReq(this);
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 1;
    private int lines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lines {
      get { return lines_; }
      set {
        lines_ = value;
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    /// <summary>Field number for the "isUseProps" field.</summary>
    public const int IsUsePropsFieldNumber = 3;
    private int isUseProps_;
    /// <summary>
    /// 0是没有使用 1是使用了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUseProps {
      get { return isUseProps_; }
      set {
        isUseProps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSlotBetReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSlotBetReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lines != other.Lines) return false;
      if (Chips != other.Chips) return false;
      if (IsUseProps != other.IsUseProps) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lines != 0) hash ^= Lines.GetHashCode();
      if (Chips != 0L) hash ^= Chips.GetHashCode();
      if (IsUseProps != 0) hash ^= IsUseProps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lines != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Lines);
      }
      if (Chips != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (IsUseProps != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsUseProps);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lines);
      }
      if (Chips != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (IsUseProps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUseProps);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSlotBetReq other) {
      if (other == null) {
        return;
      }
      if (other.Lines != 0) {
        Lines = other.Lines;
      }
      if (other.Chips != 0L) {
        Chips = other.Chips;
      }
      if (other.IsUseProps != 0) {
        IsUseProps = other.IsUseProps;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Lines = input.ReadInt32();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 24: {
            IsUseProps = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserSlotBetResp : pb::IMessage<UserSlotBetResp> {
    private static readonly pb::MessageParser<UserSlotBetResp> _parser = new pb::MessageParser<UserSlotBetResp>(() => new UserSlotBetResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSlotBetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSlotBetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSlotBetResp(UserSlotBetResp other) : this() {
      ret_ = other.ret_;
      userMoney_ = other.userMoney_;
      lines_ = other.lines_;
      chips_ = other.chips_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSlotBetResp Clone() {
      return new UserSlotBetResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 2;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 3;
    private int lines_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lines {
      get { return lines_; }
      set {
        lines_ = value;
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 4;
    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSlotBetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSlotBetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (UserMoney != other.UserMoney) return false;
      if (Lines != other.Lines) return false;
      if (Chips != other.Chips) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (Lines != 0) hash ^= Lines.GetHashCode();
      if (Chips != 0L) hash ^= Chips.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserMoney);
      }
      if (Lines != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lines);
      }
      if (Chips != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (Lines != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lines);
      }
      if (Chips != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSlotBetResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.Lines != 0) {
        Lines = other.Lines;
      }
      if (other.Chips != 0L) {
        Chips = other.Chips;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 24: {
            Lines = input.ReadInt32();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// slot中奖结果
  /// </summary>
  public sealed partial class SlotWinRet : pb::IMessage<SlotWinRet> {
    private static readonly pb::MessageParser<SlotWinRet> _parser = new pb::MessageParser<SlotWinRet>(() => new SlotWinRet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlotWinRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlotWinRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlotWinRet(SlotWinRet other) : this() {
      line_ = other.line_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlotWinRet Clone() {
      return new SlotWinRet(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlotWinRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlotWinRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Line != other.Line) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Line != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Line);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlotWinRet other) {
      if (other == null) {
        return;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Line = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播结算数据
  /// </summary>
  public sealed partial class SrvBroadcastSlotResult : pb::IMessage<SrvBroadcastSlotResult> {
    private static readonly pb::MessageParser<SrvBroadcastSlotResult> _parser = new pb::MessageParser<SrvBroadcastSlotResult>(() => new SrvBroadcastSlotResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastSlotResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastSlotResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastSlotResult(SrvBroadcastSlotResult other) : this() {
      seatId_ = other.seatId_;
      addMoney_ = other.addMoney_;
      userMoney_ = other.userMoney_;
      totalBonus_ = other.totalBonus_;
      cards_ = other.cards_.Clone();
      pots_ = other.pots_.Clone();
      bonusCnt_ = other.bonusCnt_;
      specialCard_ = other.specialCard_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastSlotResult Clone() {
      return new SrvBroadcastSlotResult(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "addMoney" field.</summary>
    public const int AddMoneyFieldNumber = 2;
    private long addMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddMoney {
      get { return addMoney_; }
      set {
        addMoney_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 3;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    /// <summary>Field number for the "totalBonus" field.</summary>
    public const int TotalBonusFieldNumber = 4;
    private long totalBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBonus {
      get { return totalBonus_; }
      set {
        totalBonus_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(42, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "pots" field.</summary>
    public const int PotsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Nkclient.SlotWinRet> _repeated_pots_codec
        = pb::FieldCodec.ForMessage(50, global::Nkclient.SlotWinRet.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.SlotWinRet> pots_ = new pbc::RepeatedField<global::Nkclient.SlotWinRet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.SlotWinRet> Pots {
      get { return pots_; }
    }

    /// <summary>Field number for the "bonusCnt" field.</summary>
    public const int BonusCntFieldNumber = 7;
    private int bonusCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BonusCnt {
      get { return bonusCnt_; }
      set {
        bonusCnt_ = value;
      }
    }

    /// <summary>Field number for the "specialCard" field.</summary>
    public const int SpecialCardFieldNumber = 8;
    private int specialCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialCard {
      get { return specialCard_; }
      set {
        specialCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastSlotResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastSlotResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (AddMoney != other.AddMoney) return false;
      if (UserMoney != other.UserMoney) return false;
      if (TotalBonus != other.TotalBonus) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!pots_.Equals(other.pots_)) return false;
      if (BonusCnt != other.BonusCnt) return false;
      if (SpecialCard != other.SpecialCard) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (AddMoney != 0L) hash ^= AddMoney.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      if (TotalBonus != 0L) hash ^= TotalBonus.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= pots_.GetHashCode();
      if (BonusCnt != 0) hash ^= BonusCnt.GetHashCode();
      if (SpecialCard != 0) hash ^= SpecialCard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (AddMoney != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AddMoney);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserMoney);
      }
      if (TotalBonus != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalBonus);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      pots_.WriteTo(output, _repeated_pots_codec);
      if (BonusCnt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BonusCnt);
      }
      if (SpecialCard != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SpecialCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (AddMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddMoney);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      if (TotalBonus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBonus);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += pots_.CalculateSize(_repeated_pots_codec);
      if (BonusCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusCnt);
      }
      if (SpecialCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialCard);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastSlotResult other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.AddMoney != 0L) {
        AddMoney = other.AddMoney;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
      if (other.TotalBonus != 0L) {
        TotalBonus = other.TotalBonus;
      }
      cards_.Add(other.cards_);
      pots_.Add(other.pots_);
      if (other.BonusCnt != 0) {
        BonusCnt = other.BonusCnt;
      }
      if (other.SpecialCard != 0) {
        SpecialCard = other.SpecialCard;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            AddMoney = input.ReadInt64();
            break;
          }
          case 24: {
            UserMoney = input.ReadInt64();
            break;
          }
          case 32: {
            TotalBonus = input.ReadInt64();
            break;
          }
          case 42: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 50: {
            pots_.AddEntriesFrom(input, _repeated_pots_codec);
            break;
          }
          case 56: {
            BonusCnt = input.ReadInt32();
            break;
          }
          case 64: {
            SpecialCard = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播牛牛结算
  /// </summary>
  public sealed partial class SrvBroadcastNiuniuResult : pb::IMessage<SrvBroadcastNiuniuResult> {
    private static readonly pb::MessageParser<SrvBroadcastNiuniuResult> _parser = new pb::MessageParser<SrvBroadcastNiuniuResult>(() => new SrvBroadcastNiuniuResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastNiuniuResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastNiuniuResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastNiuniuResult(SrvBroadcastNiuniuResult other) : this() {
      totalBonus_ = other.totalBonus_;
      cards_ = other.cards_.Clone();
      userList_ = other.userList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastNiuniuResult Clone() {
      return new SrvBroadcastNiuniuResult(this);
    }

    /// <summary>Field number for the "totalBonus" field.</summary>
    public const int TotalBonusFieldNumber = 1;
    private long totalBonus_;
    /// <summary>
    /// 奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBonus {
      get { return totalBonus_; }
      set {
        totalBonus_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nkclient.ShowCards> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Nkclient.ShowCards.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.ShowCards> cards_ = new pbc::RepeatedField<global::Nkclient.ShowCards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.ShowCards> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "userList" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nkclient.PlayerInfo> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::Nkclient.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.PlayerInfo> userList_ = new pbc::RepeatedField<global::Nkclient.PlayerInfo>();
    /// <summary>
    /// 结算用户 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.PlayerInfo> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastNiuniuResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastNiuniuResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalBonus != other.TotalBonus) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalBonus != 0L) hash ^= TotalBonus.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= userList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalBonus != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalBonus);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      userList_.WriteTo(output, _repeated_userList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalBonus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBonus);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += userList_.CalculateSize(_repeated_userList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastNiuniuResult other) {
      if (other == null) {
        return;
      }
      if (other.TotalBonus != 0L) {
        TotalBonus = other.TotalBonus;
      }
      cards_.Add(other.cards_);
      userList_.Add(other.userList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalBonus = input.ReadInt64();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播玩家下注
  /// </summary>
  public sealed partial class SrvBroadcastBetOn : pb::IMessage<SrvBroadcastBetOn> {
    private static readonly pb::MessageParser<SrvBroadcastBetOn> _parser = new pb::MessageParser<SrvBroadcastBetOn>(() => new SrvBroadcastBetOn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastBetOn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastBetOn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastBetOn(SrvBroadcastBetOn other) : this() {
      seatId_ = other.seatId_;
      slot_ = other.slot_;
      ante_ = other.ante_;
      curCarry_ = other.curCarry_;
      anteList_ = other.anteList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastBetOn Clone() {
      return new SrvBroadcastBetOn(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    /// <summary>
    /// 玩家座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 2;
    private int slot_;
    /// <summary>
    /// 下注池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 3;
    private long ante_;
    /// <summary>
    /// 金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "curCarry" field.</summary>
    public const int CurCarryFieldNumber = 4;
    private long curCarry_;
    /// <summary>
    /// 剩余金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurCarry {
      get { return curCarry_; }
      set {
        curCarry_ = value;
      }
    }

    /// <summary>Field number for the "anteList" field.</summary>
    public const int AnteListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nkclient.BonusInfo> _repeated_anteList_codec
        = pb::FieldCodec.ForMessage(42, global::Nkclient.BonusInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.BonusInfo> anteList_ = new pbc::RepeatedField<global::Nkclient.BonusInfo>();
    /// <summary>
    ///  注池信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.BonusInfo> AnteList {
      get { return anteList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastBetOn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastBetOn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (Slot != other.Slot) return false;
      if (Ante != other.Ante) return false;
      if (CurCarry != other.CurCarry) return false;
      if(!anteList_.Equals(other.anteList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (Ante != 0L) hash ^= Ante.GetHashCode();
      if (CurCarry != 0L) hash ^= CurCarry.GetHashCode();
      hash ^= anteList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (Slot != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Slot);
      }
      if (Ante != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Ante);
      }
      if (CurCarry != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurCarry);
      }
      anteList_.WriteTo(output, _repeated_anteList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (Ante != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (CurCarry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurCarry);
      }
      size += anteList_.CalculateSize(_repeated_anteList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastBetOn other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.Ante != 0L) {
        Ante = other.Ante;
      }
      if (other.CurCarry != 0L) {
        CurCarry = other.CurCarry;
      }
      anteList_.Add(other.anteList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            Slot = input.ReadInt32();
            break;
          }
          case 24: {
            Ante = input.ReadInt64();
            break;
          }
          case 32: {
            CurCarry = input.ReadInt64();
            break;
          }
          case 42: {
            anteList_.AddEntriesFrom(input, _repeated_anteList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发底牌
  /// </summary>
  public sealed partial class SrvBroadcastBoardCards : pb::IMessage<SrvBroadcastBoardCards> {
    private static readonly pb::MessageParser<SrvBroadcastBoardCards> _parser = new pb::MessageParser<SrvBroadcastBoardCards>(() => new SrvBroadcastBoardCards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastBoardCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastBoardCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastBoardCards(SrvBroadcastBoardCards other) : this() {
      seatId_ = other.seatId_;
      cards_ = other.cards_.Clone();
      boardCardTimes_ = other.boardCardTimes_;
      totalTimes_ = other.totalTimes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastBoardCards Clone() {
      return new SrvBroadcastBoardCards(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    /// <summary>
    /// 地主座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    /// <summary>
    /// 底牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "boardCardTimes" field.</summary>
    public const int BoardCardTimesFieldNumber = 3;
    private int boardCardTimes_;
    /// <summary>
    /// 底牌倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoardCardTimes {
      get { return boardCardTimes_; }
      set {
        boardCardTimes_ = value;
      }
    }

    /// <summary>Field number for the "totalTimes" field.</summary>
    public const int TotalTimesFieldNumber = 4;
    private int totalTimes_;
    /// <summary>
    /// 当前总倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTimes {
      get { return totalTimes_; }
      set {
        totalTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastBoardCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastBoardCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if (BoardCardTimes != other.BoardCardTimes) return false;
      if (TotalTimes != other.TotalTimes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (BoardCardTimes != 0) hash ^= BoardCardTimes.GetHashCode();
      if (TotalTimes != 0) hash ^= TotalTimes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (BoardCardTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BoardCardTimes);
      }
      if (TotalTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (BoardCardTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoardCardTimes);
      }
      if (TotalTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastBoardCards other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      cards_.Add(other.cards_);
      if (other.BoardCardTimes != 0) {
        BoardCardTimes = other.BoardCardTimes;
      }
      if (other.TotalTimes != 0) {
        TotalTimes = other.TotalTimes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 24: {
            BoardCardTimes = input.ReadInt32();
            break;
          }
          case 32: {
            TotalTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 下注信息
  /// </summary>
  public sealed partial class BetInfo : pb::IMessage<BetInfo> {
    private static readonly pb::MessageParser<BetInfo> _parser = new pb::MessageParser<BetInfo>(() => new BetInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetInfo(BetInfo other) : this() {
      ante_ = other.ante_;
      count_ = other.count_;
      bonus_ = other.bonus_;
      times_ = other.times_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetInfo Clone() {
      return new BetInfo(this);
    }

    /// <summary>Field number for the "ante" field.</summary>
    public const int AnteFieldNumber = 1;
    private long ante_;
    /// <summary>
    /// 下注总金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ante {
      get { return ante_; }
      set {
        ante_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 下注次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 3;
    private long bonus_;
    /// <summary>
    /// 赢钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 4;
    private int times_;
    /// <summary>
    /// 结算倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ante != other.Ante) return false;
      if (Count != other.Count) return false;
      if (Bonus != other.Bonus) return false;
      if (Times != other.Times) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ante != 0L) hash ^= Ante.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Bonus != 0L) hash ^= Bonus.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ante != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Ante);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Bonus != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Bonus);
      }
      if (Times != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ante != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ante);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Bonus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bonus);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BetInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ante != 0L) {
        Ante = other.Ante;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Bonus != 0L) {
        Bonus = other.Bonus;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ante = input.ReadInt64();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Bonus = input.ReadInt64();
            break;
          }
          case 32: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CLIENT_SEND_REQ_HINT 	 	= 0x0113,    //请求提示
  /// </summary>
  public sealed partial class UserCardList : pb::IMessage<UserCardList> {
    private static readonly pb::MessageParser<UserCardList> _parser = new pb::MessageParser<UserCardList>(() => new UserCardList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCardList(UserCardList other) : this() {
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCardList Clone() {
      return new UserCardList(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.Card.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.Card> cards_ = new pbc::RepeatedField<global::Nkclient.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCardList other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端准备
  /// </summary>
  public sealed partial class SrvBroadcastUserReady : pb::IMessage<SrvBroadcastUserReady> {
    private static readonly pb::MessageParser<SrvBroadcastUserReady> _parser = new pb::MessageParser<SrvBroadcastUserReady>(() => new SrvBroadcastUserReady());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SrvBroadcastUserReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastUserReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastUserReady(SrvBroadcastUserReady other) : this() {
      seatId_ = other.seatId_;
      userMoney_ = other.userMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SrvBroadcastUserReady Clone() {
      return new SrvBroadcastUserReady(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 2;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SrvBroadcastUserReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SrvBroadcastUserReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (UserMoney != other.UserMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (UserMoney != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SrvBroadcastUserReady other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            UserMoney = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BankerInfo : pb::IMessage<BankerInfo> {
    private static readonly pb::MessageParser<BankerInfo> _parser = new pb::MessageParser<BankerInfo>(() => new BankerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BankerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankerInfo(BankerInfo other) : this() {
      seatId_ = other.seatId_;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankerInfo Clone() {
      return new BankerInfo(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    /// <summary>
    /// 庄家座位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BankerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BankerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (Uid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BankerInfo other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// fish
  /// </summary>
  public sealed partial class FishInfo : pb::IMessage<FishInfo> {
    private static readonly pb::MessageParser<FishInfo> _parser = new pb::MessageParser<FishInfo>(() => new FishInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishInfo(FishInfo other) : this() {
      fishId_ = other.fishId_;
      fishType_ = other.fishType_;
      pathId_ = other.pathId_;
      life_ = other.life_;
      delay_ = other.delay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishInfo Clone() {
      return new FishInfo(this);
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "fishType" field.</summary>
    public const int FishTypeFieldNumber = 2;
    private int fishType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishType {
      get { return fishType_; }
      set {
        fishType_ = value;
      }
    }

    /// <summary>Field number for the "pathId" field.</summary>
    public const int PathIdFieldNumber = 3;
    private int pathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PathId {
      get { return pathId_; }
      set {
        pathId_ = value;
      }
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 4;
    private int life_;
    /// <summary>
    /// 生存时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 5;
    private int delay_;
    /// <summary>
    /// 延时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      if (FishType != other.FishType) return false;
      if (PathId != other.PathId) return false;
      if (Life != other.Life) return false;
      if (Delay != other.Delay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (FishType != 0) hash ^= FishType.GetHashCode();
      if (PathId != 0) hash ^= PathId.GetHashCode();
      if (Life != 0) hash ^= Life.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
      if (PathId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PathId);
      }
      if (Life != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Life);
      }
      if (Delay != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Delay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (FishType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
      }
      if (PathId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PathId);
      }
      if (Life != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Life);
      }
      if (Delay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishInfo other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.FishType != 0) {
        FishType = other.FishType;
      }
      if (other.PathId != 0) {
        PathId = other.PathId;
      }
      if (other.Life != 0) {
        Life = other.Life;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
          case 24: {
            PathId = input.ReadInt32();
            break;
          }
          case 32: {
            Life = input.ReadInt32();
            break;
          }
          case 40: {
            Delay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 创建鱼群
  /// </summary>
  public sealed partial class CreateFish : pb::IMessage<CreateFish> {
    private static readonly pb::MessageParser<CreateFish> _parser = new pb::MessageParser<CreateFish>(() => new CreateFish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFish(CreateFish other) : this() {
      fishList_ = other.fishList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFish Clone() {
      return new CreateFish(this);
    }

    /// <summary>Field number for the "fishList" field.</summary>
    public const int FishListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nkclient.FishInfo> _repeated_fishList_codec
        = pb::FieldCodec.ForMessage(10, global::Nkclient.FishInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.FishInfo> fishList_ = new pbc::RepeatedField<global::Nkclient.FishInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.FishInfo> FishList {
      get { return fishList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fishList_.Equals(other.fishList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fishList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fishList_.WriteTo(output, _repeated_fishList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFish other) {
      if (other == null) {
        return;
      }
      fishList_.Add(other.fishList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 捕获鱼
  /// </summary>
  public sealed partial class ShotFishMsg : pb::IMessage<ShotFishMsg> {
    private static readonly pb::MessageParser<ShotFishMsg> _parser = new pb::MessageParser<ShotFishMsg>(() => new ShotFishMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShotFishMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nkclient.ClientReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShotFishMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShotFishMsg(ShotFishMsg other) : this() {
      seatId_ = other.seatId_;
      cannonLevel_ = other.cannonLevel_;
      fishList_ = other.fishList_.Clone();
      targetPos_ = other.targetPos_;
      killList_ = other.killList_.Clone();
      userMoney_ = other.userMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShotFishMsg Clone() {
      return new ShotFishMsg(this);
    }

    /// <summary>Field number for the "seatId" field.</summary>
    public const int SeatIdFieldNumber = 1;
    private int seatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatId {
      get { return seatId_; }
      set {
        seatId_ = value;
      }
    }

    /// <summary>Field number for the "cannonLevel" field.</summary>
    public const int CannonLevelFieldNumber = 2;
    private int cannonLevel_;
    /// <summary>
    /// 炮等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CannonLevel {
      get { return cannonLevel_; }
      set {
        cannonLevel_ = value;
      }
    }

    /// <summary>Field number for the "fishList" field.</summary>
    public const int FishListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nkclient.FishInfo> _repeated_fishList_codec
        = pb::FieldCodec.ForMessage(26, global::Nkclient.FishInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.FishInfo> fishList_ = new pbc::RepeatedField<global::Nkclient.FishInfo>();
    /// <summary>
    /// 捕获的鱼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.FishInfo> FishList {
      get { return fishList_; }
    }

    /// <summary>Field number for the "targetPos" field.</summary>
    public const int TargetPosFieldNumber = 4;
    private float targetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    /// <summary>Field number for the "killList" field.</summary>
    public const int KillListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nkclient.FishInfo> _repeated_killList_codec
        = pb::FieldCodec.ForMessage(42, global::Nkclient.FishInfo.Parser);
    private readonly pbc::RepeatedField<global::Nkclient.FishInfo> killList_ = new pbc::RepeatedField<global::Nkclient.FishInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nkclient.FishInfo> KillList {
      get { return killList_; }
    }

    /// <summary>Field number for the "userMoney" field.</summary>
    public const int UserMoneyFieldNumber = 6;
    private long userMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserMoney {
      get { return userMoney_; }
      set {
        userMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShotFishMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShotFishMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatId != other.SeatId) return false;
      if (CannonLevel != other.CannonLevel) return false;
      if(!fishList_.Equals(other.fishList_)) return false;
      if (TargetPos != other.TargetPos) return false;
      if(!killList_.Equals(other.killList_)) return false;
      if (UserMoney != other.UserMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatId != 0) hash ^= SeatId.GetHashCode();
      if (CannonLevel != 0) hash ^= CannonLevel.GetHashCode();
      hash ^= fishList_.GetHashCode();
      if (TargetPos != 0F) hash ^= TargetPos.GetHashCode();
      hash ^= killList_.GetHashCode();
      if (UserMoney != 0L) hash ^= UserMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeatId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatId);
      }
      if (CannonLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CannonLevel);
      }
      fishList_.WriteTo(output, _repeated_fishList_codec);
      if (TargetPos != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TargetPos);
      }
      killList_.WriteTo(output, _repeated_killList_codec);
      if (UserMoney != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(UserMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatId);
      }
      if (CannonLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonLevel);
      }
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      if (TargetPos != 0F) {
        size += 1 + 4;
      }
      size += killList_.CalculateSize(_repeated_killList_codec);
      if (UserMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShotFishMsg other) {
      if (other == null) {
        return;
      }
      if (other.SeatId != 0) {
        SeatId = other.SeatId;
      }
      if (other.CannonLevel != 0) {
        CannonLevel = other.CannonLevel;
      }
      fishList_.Add(other.fishList_);
      if (other.TargetPos != 0F) {
        TargetPos = other.TargetPos;
      }
      killList_.Add(other.killList_);
      if (other.UserMoney != 0L) {
        UserMoney = other.UserMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeatId = input.ReadInt32();
            break;
          }
          case 16: {
            CannonLevel = input.ReadInt32();
            break;
          }
          case 26: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
          case 37: {
            TargetPos = input.ReadFloat();
            break;
          }
          case 42: {
            killList_.AddEntriesFrom(input, _repeated_killList_codec);
            break;
          }
          case 48: {
            UserMoney = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
